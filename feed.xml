<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://mattcasmith.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mattcasmith.net/" rel="alternate" type="text/html" /><updated>2025-03-29T08:22:00+00:00</updated><id>https://mattcasmith.net/feed.xml</id><title type="html">MattCASmith</title><subtitle>A blog about cyber security and technology</subtitle><entry><title type="html">Endpoint detection and response (EDR) - setting the record straight</title><link href="https://mattcasmith.net/2024/07/20/crowdstrike-bug-edr-setting-record-straight" rel="alternate" type="text/html" title="Endpoint detection and response (EDR) - setting the record straight" /><published>2024-07-20T01:00:00+01:00</published><updated>2024-07-20T01:00:00+01:00</updated><id>https://mattcasmith.net/2024/07/20/crowdstrike-bug-edr-setting-record-straight</id><author><name>mattcasmith</name></author><summary type="html">When I went to bed on the evening of Friday 19th July, I couldn’t sleep. It was a stuffy summer’s night in London, and the adrenaline was still pumping through my veins after one of the more notable days in recent memory for cyber security. Still, laying awake gave me time to reflect on what I’d seen.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2023/01/mcas.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2023/01/mcas.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Centralisation, repeatability, and automation in a modular SOC</title><link href="https://mattcasmith.net/2023/11/26/modular-soc-centralisation-repeatability-automation" rel="alternate" type="text/html" title="Centralisation, repeatability, and automation in a modular SOC" /><published>2023-11-26T00:00:00+00:00</published><updated>2023-11-26T00:00:00+00:00</updated><id>https://mattcasmith.net/2023/11/26/modular-soc-centralisation-repeatability-automation</id><author><name>mattcasmith</name></author><summary type="html">The dictionary definition of “modular” leaves a little to be desired: “Employing or involving a module or modules as the basis of design or construction.” What is implied, but that I would make explicit, is that parts of the whole can be swapped out easily while maintaining the functionality of the product.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2023/01/mcas.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2023/01/mcas.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Cyber security sometimes means learning things backwards</title><link href="https://mattcasmith.net/2023/03/26/cyber-security-learning-things-backwards" rel="alternate" type="text/html" title="Cyber security sometimes means learning things backwards" /><published>2023-03-26T00:00:00+00:00</published><updated>2023-03-26T00:00:00+00:00</updated><id>https://mattcasmith.net/2023/03/26/cyber-security-learning-things-backwards</id><author><name>mattcasmith</name></author><summary type="html">Stick around cyber security Twitter or LinkedIn for long enough and you’ll likely see somebody raise a question about how to get into the industry. You’ll also likely see a reply that describes a kind of rite of passage from sysadmin, to SOC analyst, to just about any other security role.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2023/01/mcas.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2023/01/mcas.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using winget to automate software deployment to a new laptop</title><link href="https://mattcasmith.net/2023/02/17/winget-automate-software-deployment-new-laptop" rel="alternate" type="text/html" title="Using winget to automate software deployment to a new laptop" /><published>2023-02-17T00:00:00+00:00</published><updated>2023-02-17T00:00:00+00:00</updated><id>https://mattcasmith.net/2023/02/17/winget-automate-software-deployment-new-laptop</id><author><name>mattcasmith</name></author><summary type="html">I got my first new laptop in six years this week! The new hardware is definitely exciting, but reviews aren’t really my thing, so while I’ll inevitably tweet about how the Microsoft Surface Laptop fares, that’s not the purpose of this post. This is more about the mundane job of porting all my usual applications over to a new PC, and a handy new Windows feature that helped to make things a little easier - winget. Before we get started, I want to acknowledge both that I’m late to the party on winget and that there have been package managers around on Windows for years - but it’s certainly a cool and useful addition to the core operating system, which bucks the trend when you consider how frequently Microsoft removes more advanced features and options these days (or at least applies confusing double UIs). I’ll also concede that taking the time to write a PowerShell script to automate software deployment is probably overkill for most users - myself included. The time spent on development and testing is probably greater than the amount of time it would take to download and install each package individually, but at the end of the day I now have a pre-baked script I can use to drop my software on any future systems. Initial research Before I even got as far as creating a PS1 file, my first step was to do some research to identify the software packages I wanted to install. To achieve this, I used the following winget command. winget search &amp;lt;APP_NAME&amp;gt; This ran a search across all the configured repositories (by default, basically the Microsoft Store and winget’s own one). The most important details were in the Id column, which generally follows the format Developer.Product. There were a lot of third-party apps that had the names of popular software in their own names, so this helped to sort the wheat from the chaff and identify the real packages. During this planning stage, I considered the software I wanted to deploy to my new system and ran the winget search command to find the corresponding packages until I had a complete list. The PowerShell script Now I could start writing a PowerShell script to iterate through my list of applications and try to install each of them. Firstly, I created an array to store the list (note that only the Id values here match the repository data - the names are my own more readable ones, for display and logging only). $install_apps = (&quot;Firefox&quot;, &quot;Mozilla.Firefox&quot;), (&quot;Steam&quot;, &quot;Valve.Steam&quot;), (&quot;Discord&quot;, &quot;Discord.Discord&quot;), (&quot;Netflix&quot;, &quot;9WZDNCRFJ3TJ&quot;), (&quot;Spotify&quot;, &quot;Spotify.Spotify&quot;) Next, I used a foreach loop to work through each application in $install_apps and attempt to run winget to install the corresponding package according to its Id, using the --silent flag to keep output to a minimum and require as little user interaction as possible to complete the deployment. There are a number of reasons why installation of any given application might fail - a missing package or insufficient permissions to name just a couple. To prevent missing software from flying under the radar, I used an if/else statement based on the winget exit code ($LASTEXITCODE) to detect any issues. foreach ($app in $install_apps) { Write-Host &quot;Installing&quot; $app[0] &quot;...&quot; winget install --silent --id $app[1] if ($LASTEXITCODE -eq 0) { Write-Host $app[0] &quot;installation complete.&quot; Write-Host &quot;&quot; } else { Write-Host $app[0] &quot;installation failed.&quot; Write-Host &quot;&quot; } } And that’s pretty much all I needed to get going! I also added a section to install Windows Subsystem for Linux (with Ubuntu) and a few extra lines to log failures to a file (in case I missed them in the terminal), but the code above would be perfectly adequate to try to install all the packages in the given list. The results So how did things go with the new laptop? Did my winget PowerShell script solve all my problems and allow me to kick back and relax as my applications were automatically deployed to my new system? Well, to tell the complete truth, not quite… But it was very close. As you can see from the screenshot above, winget undoubtedly made the job much quicker and easier, but it wasn’t entirely hands-off. Spotify was the only app that failed to install for some reason (perhaps because it’s one of those apps that come half-installed on a fresh Windows system?), but there were also a couple of others that required me to hit the Y key to accept licence agreements and terms of use. I eventually found a solution to this part of the issue - unfortunately just after I ran the script. You can accept licence agreements automatically by using the --accept-source-agreements and --accept-package-agreements parameters when running winget. Still, it was a fun experiment, saved a lot of time downloading installers from developer websites and running them manually via the GUI, and leaves me with a script that will be easy to repurpose to (almost) automate the setup of any new computers I adopt in future. While winget isn’t the perfect zero-touch solution, I’d definitely recommend giving it a go - particularly if you ever find yourself in a situation where you need to set up multiple systems in a short time and a cheat code would help to preserve your sanity.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2023/02/winget_1.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2023/02/winget_1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2023: Thoughts on new challenges and sharing experiences</title><link href="https://mattcasmith.net/2023/01/13/2023-new-challenges-sharing-experiences" rel="alternate" type="text/html" title="2023&amp;#58; Thoughts on new challenges and sharing experiences" /><published>2023-01-13T00:00:00+00:00</published><updated>2023-01-13T00:00:00+00:00</updated><id>https://mattcasmith.net/2023/01/13/2023-new-challenges-sharing-experiences</id><author><name>mattcasmith</name></author><summary type="html">A belated happy new year! If you’re reading this, I hope you have a terrific 2023. I recently went back and read some old posts that have long since been deleted from this blog - writings from my journalism days that reminded me of my perspectives on certain news events and emerging technologies from the mid-2010s and sparked some nostalgia for my early twenties along the way. By the end of 2017, I’d landed a job in cyber security and the tone of my blog changed. Gone were the slightly rambling posts that gave a sense of personality, and what came was primarily content consisting of technical notes about things I’d been working on in Python or a particular forensic artefact (don’t get me wrong - I’m proud of many of these articles, and they remain a useful way of organising my thoughts). Reasons for retreating My change of industry played a role in this. Despite having reported on cyber security for four years beforehand, my hesitance over ranting about a sector I was quite new to in the same way I’d written about consumer technology was justified. Another factor was that my job just wasn’t as public - an interesting conversation or briefing as a journalist might make a good blog post if it didn’t fit my employer’s site, but accounts of incidents I work and security discussions with clients must stay behind closed doors. But there was also a force at play that was more toxic than humbleness or confidentiality: anxiety. I’d seen flashes of it before as I battled imposter syndrome on entering cyber security, but the real thing crept up on me during the COVID-19 pandemic, and I spent a good deal of 2022 pushing myself in various ways to get it under control. It still has its occasional moments, but I’m in a much better place heading into 2023. While keeping background stress as low as possible helped with this, I was also anxious in less of a clinical sense about writing. The less you put yourself out there, the less likely it is that you’ll be called out on something, or somebody will tell you that you’re wrong. Inertia is like laying in a safety net. Incremental improvement But if you’re sitting still on the net, paralysed out of fear of action and its consequences, you’ll never walk the tightrope. Sure, it’s far less likely that you’ll fail, but you’ll also never do anything remarkable. For all we know, the greatest ideas in history might not be the ones in modern day textbooks - they might never have made it that far, living and dying inside their creators’ heads because they were never shared. I doubt anything I write on these pages will change the world, and most of my ideas are iterations on or combinations of existing ones, rather than fully original thoughts. But even if I have nothing revolutonary to say, the little things that inspire me to put digital pen to paper could still be enough to make our small corner of the world a better place, even if it’s just a tip that saves someone else five minutes. Some changes in my life have put me what will hopefully be a far better place to trial ideas and implement change in 2023, and I intend to write some more personal, thoughtful posts to share my learnings from these experiments. I still might not be able to go into as much detail as I did a decade ago, but I’m feeling energetic, inspired, and more motivated to share my experiences than I have been in years. If you’re interested, check my blog regularly for new posts, and follow me on Twitter for day-to-day updates. Feel free to email me, too - it’s an exciting, optimistic time and I’d be happy to connect.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2023/01/mcas.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2023/01/mcas.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Investigating Explorer’s temporary ZIP folders and retrieving files</title><link href="https://mattcasmith.net/2022/12/15/investigating-explorer-temporary-zip-folders" rel="alternate" type="text/html" title="Investigating Explorer's temporary ZIP folders and retrieving files" /><published>2022-12-14T00:00:00+00:00</published><updated>2022-12-14T00:00:00+00:00</updated><id>https://mattcasmith.net/2022/12/15/investigating-explorer-temporary-zip-folders</id><author><name>mattcasmith</name></author><summary type="html">If I was to describe how often malware is downloaded within ZIP archives, “common” would be a huge understatement. A key artefact in these investigations is the temporary directory Windows creates when a user opens an archive in Explorer, but I recently realised I’d never actually run a proper test to see when the folder is created, when it is not, and when it is deleted. So to clear that up, here’s a quick blog post.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/12/explorer-temporary-zip-folders_0.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/12/explorer-temporary-zip-folders_0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Parsing login sessions from the Windows event log with PowerShell</title><link href="https://mattcasmith.net/2022/12/03/parsing-login-sessions-windows-security-event-log-powershell" rel="alternate" type="text/html" title="Parsing login sessions from the Windows event log with PowerShell" /><published>2022-12-03T00:00:00+00:00</published><updated>2022-12-03T00:00:00+00:00</updated><id>https://mattcasmith.net/2022/12/03/parsing-logon-sessions-windows-security-event-log-powershell</id><author><name>mattcasmith</name></author><summary type="html">Faced with a day at home recovering from my most recent COVID-19 booster vaccine, I realised I hadn’t written anything more than a few lines of PowerShell in a while and decided to spend some time working on something interesting. The idea occurred to me to try to correlate Windows login sessions from the Security event log, and the Windows Logon Session EVTX Parser script is the result.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/12/windows_logon_session_evtx_parser_0.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/12/windows_logon_session_evtx_parser_0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using Tkinter to build simple GUIs for Python apps</title><link href="https://mattcasmith.net/2022/08/21/using-tkinter-gui-python-apps" rel="alternate" type="text/html" title="Using Tkinter to build simple GUIs for Python apps" /><published>2022-08-21T01:00:00+01:00</published><updated>2022-08-21T01:00:00+01:00</updated><id>https://mattcasmith.net/2022/08/21/using-tkinter-gui-python-apps</id><author><name>mattcasmith</name></author><summary type="html">I’ve written many Python scripts and apps in the past, including my Windows backup utility Backutil, which is probably the my most complex project to date. But I’ve always designed these to run in the background or on the command line, and haven’t ever tried to build an app with a graphical user interface (GUI). I was recently studying for a few cyber security certifications and realised it would be useful to have an app for displaying flashcards. There are probably a million solutions for this online already, but I thought it would be a good opportunity to learn how to add a GUI to control some simple Python functions. So I took to Google, looked up some tutorials, and cobbled something together on a Saturday afternoon. I’ll share the full code in future via GitHub and another blog post (there are still some more features I want to add), but for now I’ll focus on the GUI-related elements and how they connect to everything else. Introducting Tkinter Tkinter is a Python library that allows you to work with the Tcl/Tk GUI toolkit to create applications that will work across Windows, macOS, and Linux. You can visit the link to review the full documentation, but I’ll cover some of the basics I learnt and how I used them for my flashcards app in this post. As with any Python extension, the first step is to import the library. from tkinter import * from tkinter import ttk To understand what comes next, it’s probably better to see what the end result looks like first, so here’s the very simple GUI that we’ll be constructing in the following code segments for the flashcards app. As you can see, we have a main area that displays the content of the current flashcard, a button to flip the card to the other side, previous/next buttons and a counter to show the current position, and a button to reshuffle the deck into a new random order. There are also some keyboard shortcuts so the user doesn’t always need to navigate with the mouse. In the following sections, I’ll go over how each of these work. Setting up the window and grid We need a canvas before we can do any painting, and in this case the canvas is the application’s main window - also known as root. We can set this up with a few simple lines of code. root = Tk() root.title(&quot;Flashcards!&quot;) root.geometry(&quot;400x400&quot;) You can probably already glean the basics just by reading this, but with title we have set the window title to Flashcards!, and with geometry we have set the default window size to 400 by 400 pixels. Before we can place individual elements in our window, we need to establish a grid, which we’ll call mainframe. The following lines create this frame and centre it with the compass-point sticky attributes. mainframe = ttk.Frame(root, width=400, height=400) mainframe.grid(column=0, row=0, sticky=(N, W, E, S)) With the grid itself set up, we can now apply attributes to the individual rows and columns. My basic GUI will require four rows, but only one of them needs any special configuration. I’m using weight and minsize on the second row to reserve plenty of space for the content of the cards. mainframe.rowconfigure(1, weight=8, minsize=295) And that’s our grid set up and formatted! To help you to visualise where we’re adding each button and label in the next section, here’s roughly how the grid aligns to the finished GUI. Notice how the tweaks we made to the second row ensure there’s plenty of space in the middle in case the user provides lengthy content for their flashcards. You’ll probably also spot that the main card content and the Flip button don’t respect the column layout - we’ll see how to achieve this in a moment. Buttons, labels, and string variables Now we can get to placing the window contents - but we still have one more important job to do first. The text in the main card content section and the counter in the top right will need to change based on the user’s input, and to be able to update them we must establish them as StringVar() variables. card_content = StringVar() card_number = StringVar() Then we create each button and label individually and assign their attributes. ttk.Button(mainframe, text=&quot;Flip&quot;, command=flip_card).grid(column=1, row=2, columnspan=3, sticky=(W,E,S)) ttk.Button(mainframe, text=&quot;&amp;lt;&amp;lt;&amp;lt;&quot;, command=prev_card, width=15).grid(column=1, row=3, sticky=(W,S)) ttk.Button(mainframe, text=&quot;Shuffle&quot;, command=randomise_data, width=15).grid(column=2, row=3, sticky=S) ttk.Button(mainframe, text=&quot;&amp;gt;&amp;gt;&amp;gt;&quot;, command=next_card, width=15).grid(column=3, row=3, sticky=(E,S)) ttk.Label(mainframe, font=&quot;Verdana&quot;, textvariable=card_content, wraplength=390, anchor=&quot;center&quot;, width=38).grid(column=1, row=1, columnspan=3) ttk.Label(mainframe, textvariable=card_number, anchor=&quot;e&quot;, width=15).grid(column=3, row=0) ttk.Label(mainframe, text=&quot;MattCASmith.net&quot;, anchor=&quot;w&quot;, width=17).grid(column=1, row=0) In the brackets after each Button or Label is created, we first state which element it should be placed within (mainframe) and then provide various configurations. There are three that are worth explaining: textvariable - used to assign the two StringVar() variables we established to their respective labels. This is necessary for dynamic text. If the text is static, text can be used instead anchor - sets the alignment of the label text based on compass point values command - links buttons to the Python functions that must be executed when they are clicked. For example, clicking the Shuffle button will execute the randomise_data function In the brackets after grid we establish the placement of each element in the grid we set up earlier. The column and row numbers assign a cell to the element, and sticky sets its alignment within that cell. An interesting attribute here is columnspan, which allows an element to sit across multiple columns - as is the case here with the main content and the Shuffle button. Keyboard shortcuts With our GUI mostly in place, we have an issue. When revising using a flashcards app, you’d want to be able to cycle quickly between the cards and flip them instantly to see whether you’re right or wrong. But at the moment our user needs to click on the corresponding buttons each time they want to change the view. So let’s fix that with some keyboard shortcuts so they can study at speed. root.bind('&amp;lt;Left&amp;gt;', prev_card) root.bind('&amp;lt;Right&amp;gt;', next_card) root.bind('&amp;lt;Return&amp;gt;', flip_card) This should be fairly self-explanatory, but essentially what each line achieves is to bind a Python function (prev_card, next_card, flip_card) to a key (the left and right arrows and return, respectively), reducing the work required to cycle through cards and providing a much smoother user experience. Drawing the window There’s just a little more admin to do before our application will run properly. Firstly, let’s add some padding to each cell in the grid to space out our buttons and labels a little. for child in mainframe.winfo_children(): child.grid_configure(padx=5, pady=5) Finally, we use mainloop() to run our application and draw the window. When execution reaches this line, the window will be drawn and the app will essentially sit idle awaiting user input, so it’s important this we did the necessary legwork beforehand to make sure everything is in place and presentable. root.mainloop() And there you have it - this code (and the functions required to provide the actual functionality) should be all you need to create a very simple GUI application using Python. Flashcards! is currently at the minimum viable product stage - it’s perfectly usable as a study tool, but still rough round the edges. Once I’ve had a chance to spruce it up a bit I’ll be sure to share the full project code. Watch this space!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/08/tkinter-python_0.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/08/tkinter-python_0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Linux .bash_history: Basics, behaviours, and forensics</title><link href="https://mattcasmith.net/2022/02/22/bash-history-basics-behaviours-forensics" rel="alternate" type="text/html" title="Linux .bash&amp;#95;history&amp;#58; Basics, behaviours, and forensics" /><published>2022-02-22T00:00:00+00:00</published><updated>2022-02-22T00:00:00+00:00</updated><id>https://mattcasmith.net/2022/02/22/bash-history-basics-behaviours-forensics</id><author><name>mattcasmith</name></author><summary type="html">During any incident investigation on a Linux system, one of the most valuable things for responders and forensicators to establish is which commands were run. This is key to finding out what an attacker or malicious user was attempting to do, and what remediation activities are required.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/02/bash-history_1.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/02/bash-history_1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SANS Holiday Hack Challenge 2021: Slot machine walkthrough</title><link href="https://mattcasmith.net/2022/01/08/sans-holiday-hack-2021-slot-machine" rel="alternate" type="text/html" title="SANS Holiday Hack Challenge 2021&amp;#58; Slot machine walkthrough" /><published>2022-01-08T00:01:00+00:00</published><updated>2022-01-08T00:01:00+00:00</updated><id>https://mattcasmith.net/2022/01/08/sans-holiday-hack-2021-slot-machine</id><author><name>mattcasmith</name></author><summary type="html">Here’s one more writeup from the SANS Holiday Hack Challenge! The slot machine hack was one of the showpiece challenges this year, so I thought I’d put together a quick blog post to guide you through the process of identifying and exploiting a vulnerability in the game.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/01/sans-holiday-challenge-slots_1.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/01/sans-holiday-challenge-slots_1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>