<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://mattcasmith.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mattcasmith.net/" rel="alternate" type="text/html" /><updated>2023-01-13T10:19:11+00:00</updated><id>https://mattcasmith.net/feed.xml</id><title type="html">MattCASmith</title><subtitle>A blog about cyber security and technology</subtitle><entry><title type="html">2023: Thoughts on new challenges and sharing experiences</title><link href="https://mattcasmith.net/2023/01/13/2023-new-challenges-sharing-experiences" rel="alternate" type="text/html" title="2023&amp;#58; Thoughts on new challenges and sharing experiences" /><published>2023-01-13T00:00:00+00:00</published><updated>2023-01-13T00:00:00+00:00</updated><id>https://mattcasmith.net/2023/01/13/2023-new-challenges-sharing-experiences</id><content type="html" xml:base="https://mattcasmith.net/2023/01/13/2023-new-challenges-sharing-experiences">&lt;p&gt;A belated happy new year! If you’re reading this, I hope you have a terrific 2023.&lt;/p&gt;

&lt;p&gt;I recently went back and read some old posts that have long since been deleted from this blog - writings from my journalism days that reminded me of my perspectives on certain news events and emerging technologies from the mid-2010s and sparked some nostalgia for my early twenties along the way.&lt;/p&gt;

&lt;p&gt;By the end of 2017, I’d landed a job in cyber security and the tone of my blog changed. Gone were the slightly rambling posts that gave a sense of personality, and what came was primarily content consisting of technical notes about things I’d been working on in &lt;a href=&quot;/category/programming&quot;&gt;Python&lt;/a&gt; or a particular &lt;a href=&quot;/category/cyber-security&quot;&gt;forensic artefact&lt;/a&gt; (don’t get me wrong - I’m proud of many of these articles, and they remain a useful way of organising my thoughts).&lt;/p&gt;

&lt;h3 id=&quot;reasons-for-retreating&quot;&gt;Reasons for retreating&lt;/h3&gt;

&lt;p&gt;My change of industry played a role in this. Despite having reported on cyber security for four years beforehand, my hesitance over ranting about a sector I was quite new to in the same way I’d written about consumer technology was justified. Another factor was that my job just wasn’t as public - an interesting conversation or briefing as a journalist might make a good blog post if it didn’t fit my employer’s site, but accounts of incidents I work and security discussions with clients must stay behind closed doors.&lt;/p&gt;

&lt;p&gt;But there was also a force at play that was more toxic than humbleness or confidentiality: anxiety. I’d seen flashes of it before as I battled imposter syndrome on entering cyber security, but the real thing crept up on me during the COVID-19 pandemic, and I spent a good deal of 2022 pushing myself in various ways to get it under control. It still has its occasional moments, but I’m in a much better place heading into 2023.&lt;/p&gt;

&lt;p&gt;While keeping background stress as low as possible helped with this, I was also anxious in less of a clinical sense about writing. The less you put yourself out there, the less likely it is that you’ll be called out on something, or somebody will tell you that you’re wrong. Inertia is like laying in a safety net.&lt;/p&gt;

&lt;h3 id=&quot;incremental-improvement&quot;&gt;Incremental improvement&lt;/h3&gt;

&lt;p&gt;But if you’re sitting still on the net, paralysed out of fear of action and its consequences, you’ll never walk the tightrope. Sure, it’s far less likely that you’ll fail, but you’ll also never do anything remarkable. For all we know, the greatest ideas in history might not be the ones in modern day textbooks - they might never have made it that far, living and dying inside their creators’ heads because they were never shared.&lt;/p&gt;

&lt;p&gt;I doubt anything I write on these pages will change the world, and most of my ideas are iterations on or combinations of existing ones, rather than fully original thoughts. But even if I have nothing revolutonary to say, the little things that inspire me to put digital pen to paper could still be enough to make our small corner of the world a better place, even if it’s just a tip that saves someone else five minutes.&lt;/p&gt;

&lt;p&gt;Some changes in my life have put me what will hopefully be a far better place to trial ideas and implement change in 2023, and I intend to write some more personal, thoughtful posts to share my learnings from these experiments. I still might not be able to go into as much detail as I did a decade ago, but I’m feeling energetic, inspired, and more motivated to share my experiences than I have been in years.&lt;/p&gt;

&lt;p&gt;If you’re interested, check &lt;a href=&quot;https://mattcasmith.net&quot;&gt;my blog&lt;/a&gt; regularly for new posts, and &lt;a href=&quot;https://twitter.com/mattcasmith&quot; target=&quot;_blank&quot;&gt;follow me on Twitter&lt;/a&gt; for day-to-day updates. Feel free to &lt;a href=&quot;mailto:mattcasmith@protonmail.com&quot;&gt;email me&lt;/a&gt;, too - it’s an exciting, optimistic time and I’d be happy to connect.&lt;/p&gt;</content><author><name>mattcasmith</name></author><summary type="html">A belated happy new year! If you’re reading this, I hope you have a terrific 2023. I recently went back and read some old posts that have long since been deleted from this blog - writings from my journalism days that reminded me of my perspectives on certain news events and emerging technologies from the mid-2010s and sparked some nostalgia for my early twenties along the way. By the end of 2017, I’d landed a job in cyber security and the tone of my blog changed. Gone were the slightly rambling posts that gave a sense of personality, and what came was primarily content consisting of technical notes about things I’d been working on in Python or a particular forensic artefact (don’t get me wrong - I’m proud of many of these articles, and they remain a useful way of organising my thoughts). Reasons for retreating My change of industry played a role in this. Despite having reported on cyber security for four years beforehand, my hesitance over ranting about a sector I was quite new to in the same way I’d written about consumer technology was justified. Another factor was that my job just wasn’t as public - an interesting conversation or briefing as a journalist might make a good blog post if it didn’t fit my employer’s site, but accounts of incidents I work and security discussions with clients must stay behind closed doors. But there was also a force at play that was more toxic than humbleness or confidentiality: anxiety. I’d seen flashes of it before as I battled imposter syndrome on entering cyber security, but the real thing crept up on me during the COVID-19 pandemic, and I spent a good deal of 2022 pushing myself in various ways to get it under control. It still has its occasional moments, but I’m in a much better place heading into 2023. While keeping background stress as low as possible helped with this, I was also anxious in less of a clinical sense about writing. The less you put yourself out there, the less likely it is that you’ll be called out on something, or somebody will tell you that you’re wrong. Inertia is like laying in a safety net. Incremental improvement But if you’re sitting still on the net, paralysed out of fear of action and its consequences, you’ll never walk the tightrope. Sure, it’s far less likely that you’ll fail, but you’ll also never do anything remarkable. For all we know, the greatest ideas in history might not be the ones in modern day textbooks - they might never have made it that far, living and dying inside their creators’ heads because they were never shared. I doubt anything I write on these pages will change the world, and most of my ideas are iterations on or combinations of existing ones, rather than fully original thoughts. But even if I have nothing revolutonary to say, the little things that inspire me to put digital pen to paper could still be enough to make our small corner of the world a better place, even if it’s just a tip that saves someone else five minutes. Some changes in my life have put me what will hopefully be a far better place to trial ideas and implement change in 2023, and I intend to write some more personal, thoughtful posts to share my learnings from these experiments. I still might not be able to go into as much detail as I did a decade ago, but I’m feeling energetic, inspired, and more motivated to share my experiences than I have been in years. If you’re interested, check my blog regularly for new posts, and follow me on Twitter for day-to-day updates. Feel free to email me, too - it’s an exciting, optimistic time and I’d be happy to connect.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2023/01/xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2023/01/xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Investigating Explorer’s temporary ZIP folders and retrieving files</title><link href="https://mattcasmith.net/2022/12/15/investigating-explorer-temporary-zip-folders" rel="alternate" type="text/html" title="Investigating Explorer's temporary ZIP folders and retrieving files" /><published>2022-12-14T00:00:00+00:00</published><updated>2022-12-14T00:00:00+00:00</updated><id>https://mattcasmith.net/2022/12/15/investigating-explorer-temporary-zip-folders</id><content type="html" xml:base="https://mattcasmith.net/2022/12/15/investigating-explorer-temporary-zip-folders">&lt;p&gt;If I was to describe how often malware is downloaded within ZIP archives, “common” would be a huge understatement. A key artefact in these investigations is the temporary directory Windows creates when a user opens an archive in Explorer, but I recently realised I’d never actually run a proper test to see when the folder is created, when it is not, and when it is deleted. So to clear that up, here’s a quick blog post.&lt;/p&gt;

&lt;h3 id=&quot;zip-archives-on-easy-mode&quot;&gt;ZIP archives on easy mode&lt;/h3&gt;

&lt;p&gt;There was a time when a ZIP archive was an indecipherable box that Windows couldn’t see inside. To access the files within, you’d have to download third-party software, like a trial version of WinZip that would incessantly prompt you to buy a licence whenever you downloaded something from the internet.&lt;/p&gt;

&lt;p&gt;That all came to an end with - I &lt;em&gt;think&lt;/em&gt;, although I may be slightly mistaken - Windows XP, when Microsoft added native capabilities within Windows Explorer to zip and unzip files. This is now a near-seamless experience, with the user able to open a ZIP archive as though it were a normal folder, as seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/12/explorer-temporary-zip-folders_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But what’s going on behind the scenes when this happens, and what artefacts does it leave behind for forensicators and responders? With so much malware downloaded from the internet and attached to emails inside ZIP archives, knowing where to look can be a powerful tool in tracing user actions.&lt;/p&gt;

&lt;h3 id=&quot;the-amazing-disappearing-folder&quot;&gt;The amazing disappearing folder&lt;/h3&gt;

&lt;p&gt;This focus of this post is the temporary directory that Explorer creates, quietly unzipping parts of the archive on demand in the background so that it can present the user with that seamless interface on the front end. It’s located within the user’s &lt;code&gt;AppData&lt;/code&gt; &lt;code&gt;Temp&lt;/code&gt; folder, under a path like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;AppData&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;Local&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;Temp&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;Temp1_zipname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;\&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But when exactly is the folder created? I previously assumed, wrongfully, that it would be created as soon as the user double-clicked the ZIP file in Explorer and viewed the directory listing within. However, that is not the case, and as long as the user stays within Explorer only, no folder is created.&lt;/p&gt;

&lt;p&gt;As an aside, I’ve noted that this also applies to nested folders within the ZIP archive - the user can browse them without triggering the &lt;code&gt;Temp1&lt;/code&gt; folder creation. However, if the ZIP archive contains &lt;em&gt;another&lt;/em&gt; ZIP archive and the user opens that with Explorer, a Temp1 folder is created for the &lt;em&gt;parent&lt;/em&gt; archive.&lt;/p&gt;

&lt;p&gt;The most common way a user will trigger the Temp1 folder’s creation, however, is by opening a file within the archive. This will create the folder and populate it with &lt;em&gt;only the file the user has actually opened&lt;/em&gt;. Subsequent files are copied to the folder as they are opened by the user, but it’s worth noting that the &lt;code&gt;Temp1&lt;/code&gt; folder &lt;em&gt;will not contain all files from the archive unless the user opens them all&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/12/explorer-temporary-zip-folders_2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These files are persistent regardless of whether the user closes them or opens other files. Interestingly, if the user makes changes to a file within the archive, by default the Save As dialogue box shows them the &lt;code&gt;Temp1&lt;/code&gt; folder, meaning an inattentive user might actually end up saving their edited copies to the same location (although this is unlikely, as they would have to give their file a different name).&lt;/p&gt;

&lt;p&gt;Once the &lt;code&gt;Temp1&lt;/code&gt; folder is created, it remains in place for as long as the user has &lt;em&gt;any&lt;/em&gt; ZIP archive open in Explorer. This is simple enough when working with one archive - the user closes the ZIP file and the &lt;code&gt;Temp1&lt;/code&gt; folder disappears. But if the user opens files within &lt;code&gt;a.zip&lt;/code&gt; and &lt;code&gt;b.zip&lt;/code&gt;, then closes &lt;code&gt;b.zip&lt;/code&gt;, the &lt;code&gt;Temp1&lt;/code&gt; folders for &lt;em&gt;both&lt;/em&gt; archives will remain until &lt;code&gt;a.zip&lt;/code&gt; is also closed in Explorer.&lt;/p&gt;

&lt;p&gt;It’s also worth noting here that the folder deletion doesn’t care about the files inside - it’ll happen whether they’re still open or not. The only scenario I could find where specific files matter is if the user saves an edited copy of a file (with a different name, since the originals are read-only) inside the &lt;code&gt;Temp1&lt;/code&gt; folder or moves a new file inside. If there’s a file that “doesn’t belong” at the time folder deletion is triggered, Explorer deletes the original files but leaves the directory and the “custom” files where they are.&lt;/p&gt;

&lt;p&gt;Another short note, this time on naming: The temporary folders almost always start &lt;code&gt;Temp1&lt;/code&gt;. In the previous example, there would be two folders named &lt;code&gt;Temp1_a.zip&lt;/code&gt; and &lt;code&gt;Temp1_b.zip&lt;/code&gt;. The only time the number increments is when dealing with two archives with &lt;em&gt;exactly the same name&lt;/em&gt;. If the user opens files within two archives, both called &lt;code&gt;a.zip&lt;/code&gt;, at the same time, Explorer creates &lt;code&gt;Temp1_a.zip&lt;/code&gt; and &lt;code&gt;Temp2_a.zip&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Using the newfound knowledge from our experiments, we can draw up a rough guide to this behaviour and what your observations from log- and disk-based investigations might mean. As always, it’s best not to rely completely on this information and cross-reference with other artefacts wherever possible.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Observed&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Inferred&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Temp1&lt;/code&gt; folder created&lt;/td&gt;
      &lt;td&gt;User opened a file within the ZIP archive with Explorer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;File inside &lt;code&gt;Temp1&lt;/code&gt; folder&lt;/td&gt;
      &lt;td&gt;User opened this file from ZIP archive &lt;em&gt;OR&lt;/em&gt; manually wrote it to folder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Temp1&lt;/code&gt; folder present&lt;/td&gt;
      &lt;td&gt;User still has at least one ZIP archive open &lt;em&gt;OR&lt;/em&gt; manually wrote a file inside&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Temp1&lt;/code&gt; folder deleted&lt;/td&gt;
      &lt;td&gt;User closed &lt;em&gt;all&lt;/em&gt; open ZIP archives in Explorer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Temp1&lt;/code&gt; folder not created&lt;/td&gt;
      &lt;td&gt;User did not open any files from ZIP archive in Explorer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Temp2&lt;/code&gt; folder created&lt;/td&gt;
      &lt;td&gt;User opened files inside two identically named ZIP files with Explorer&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>mattcasmith</name></author><summary type="html">If I was to describe how often malware is downloaded within ZIP archives, “common” would be a huge understatement. A key artefact in these investigations is the temporary directory Windows creates when a user opens an archive in Explorer, but I recently realised I’d never actually run a proper test to see when the folder is created, when it is not, and when it is deleted. So to clear that up, here’s a quick blog post. ZIP archives on easy mode There was a time when a ZIP archive was an indecipherable box that Windows couldn’t see inside. To access the files within, you’d have to download third-party software, like a trial version of WinZip that would incessantly prompt you to buy a licence whenever you downloaded something from the internet. That all came to an end with - I think, although I may be slightly mistaken - Windows XP, when Microsoft added native capabilities within Windows Explorer to zip and unzip files. This is now a near-seamless experience, with the user able to open a ZIP archive as though it were a normal folder, as seen below. But what’s going on behind the scenes when this happens, and what artefacts does it leave behind for forensicators and responders? With so much malware downloaded from the internet and attached to emails inside ZIP archives, knowing where to look can be a powerful tool in tracing user actions. The amazing disappearing folder This focus of this post is the temporary directory that Explorer creates, quietly unzipping parts of the archive on demand in the background so that it can present the user with that seamless interface on the front end. It’s located within the user’s AppData Temp folder, under a path like this: C:\Users\user\AppData\Local\Temp\Temp1_zipname.zip\ But when exactly is the folder created? I previously assumed, wrongfully, that it would be created as soon as the user double-clicked the ZIP file in Explorer and viewed the directory listing within. However, that is not the case, and as long as the user stays within Explorer only, no folder is created. As an aside, I’ve noted that this also applies to nested folders within the ZIP archive - the user can browse them without triggering the Temp1 folder creation. However, if the ZIP archive contains another ZIP archive and the user opens that with Explorer, a Temp1 folder is created for the parent archive. The most common way a user will trigger the Temp1 folder’s creation, however, is by opening a file within the archive. This will create the folder and populate it with only the file the user has actually opened. Subsequent files are copied to the folder as they are opened by the user, but it’s worth noting that the Temp1 folder will not contain all files from the archive unless the user opens them all. These files are persistent regardless of whether the user closes them or opens other files. Interestingly, if the user makes changes to a file within the archive, by default the Save As dialogue box shows them the Temp1 folder, meaning an inattentive user might actually end up saving their edited copies to the same location (although this is unlikely, as they would have to give their file a different name). Once the Temp1 folder is created, it remains in place for as long as the user has any ZIP archive open in Explorer. This is simple enough when working with one archive - the user closes the ZIP file and the Temp1 folder disappears. But if the user opens files within a.zip and b.zip, then closes b.zip, the Temp1 folders for both archives will remain until a.zip is also closed in Explorer. It’s also worth noting here that the folder deletion doesn’t care about the files inside - it’ll happen whether they’re still open or not. The only scenario I could find where specific files matter is if the user saves an edited copy of a file (with a different name, since the originals are read-only) inside the Temp1 folder or moves a new file inside. If there’s a file that “doesn’t belong” at the time folder deletion is triggered, Explorer deletes the original files but leaves the directory and the “custom” files where they are. Another short note, this time on naming: The temporary folders almost always start Temp1. In the previous example, there would be two folders named Temp1_a.zip and Temp1_b.zip. The only time the number increments is when dealing with two archives with exactly the same name. If the user opens files within two archives, both called a.zip, at the same time, Explorer creates Temp1_a.zip and Temp2_a.zip. Summary Using the newfound knowledge from our experiments, we can draw up a rough guide to this behaviour and what your observations from log- and disk-based investigations might mean. As always, it’s best not to rely completely on this information and cross-reference with other artefacts wherever possible. Observed Inferred Temp1 folder created User opened a file within the ZIP archive with Explorer File inside Temp1 folder User opened this file from ZIP archive OR manually wrote it to folder Temp1 folder present User still has at least one ZIP archive open OR manually wrote a file inside Temp1 folder deleted User closed all open ZIP archives in Explorer Temp1 folder not created User did not open any files from ZIP archive in Explorer Temp2 folder created User opened files inside two identically named ZIP files with Explorer</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/12/explorer-temporary-zip-folders_0.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/12/explorer-temporary-zip-folders_0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Parsing login sessions from the Windows event log with PowerShell</title><link href="https://mattcasmith.net/2022/12/03/parsing-login-sessions-windows-security-event-log-powershell" rel="alternate" type="text/html" title="Parsing login sessions from the Windows event log with PowerShell" /><published>2022-12-03T00:00:00+00:00</published><updated>2022-12-03T00:00:00+00:00</updated><id>https://mattcasmith.net/2022/12/03/parsing-logon-sessions-windows-security-event-log-powershell</id><content type="html" xml:base="https://mattcasmith.net/2022/12/03/parsing-login-sessions-windows-security-event-log-powershell">&lt;p&gt;Faced with a day at home recovering from my most recent COVID-19 booster vaccine, I realised I hadn’t written anything more than a few lines of PowerShell in a while and decided to spend some time working on something interesting. The idea occurred to me to try to correlate Windows login sessions from the Security event log, and the Windows Logon Session EVTX Parser script is the result.&lt;/p&gt;

&lt;h3 id=&quot;contents&quot;&gt;Contents&lt;/h3&gt;

&lt;p&gt;1. &lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;br /&gt;
          a. &lt;a href=&quot;#testing-and-limitations&quot;&gt;Testing and limitations&lt;/a&gt;&lt;br /&gt;
2. &lt;a href=&quot;#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;br /&gt;
          a. &lt;a href=&quot;#verbosity&quot;&gt;Verbosity&lt;/a&gt;&lt;br /&gt;
3. &lt;a href=&quot;#reading-the-output&quot;&gt;Reading the output&lt;/a&gt;&lt;br /&gt;
4. &lt;a href=&quot;#download&quot;&gt;Download&lt;/a&gt;&lt;br /&gt;
5. &lt;a href=&quot;#future-development&quot;&gt;Future development&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The Windows Logon Session EVTX Parser is a script that reads either a live or an exported Windows Security event log and produces a list of login sessions, including the login and logout times.&lt;/p&gt;

&lt;p&gt;Granted, Windows event logs - and particularly these events - are likely among the first logs you would onboard to a security information and event management (SIEM) tool in a corporate environment, but there may be situations where data isn’t so accessible - for example, when investigating a host that has not been onboarded to the central repository, or a personal device involved in a forensics case.&lt;/p&gt;

&lt;p style=&quot;float: left; width: 90%; padding: 5px; padding-left: 15px; padding-right: 5%; margin: 30px 0 10px 0; font-style: italic; border-left: 5px solid red; background: #ff9999; color: #333;&quot;&gt;This script is a learning/hobby project and some aspects may not follow best practices. While you're welcome to use it, you do so at your own risk. Make sure you take a backup of your files before trying it out, and don't go running it in production without proper checks.&lt;/p&gt;

&lt;p&gt;The Windows Security event log generates events with the ID &lt;a href=&quot;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4624&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;4624&lt;/code&gt;&lt;/a&gt; whenever a user logs in. These events contain a multitude of useful information, from the timestamp and username to the login type (e.g. local or remote) and - where relevant - the remote IP address used. When the user logs out, some combination of the events &lt;a href=&quot;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4634&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;4634&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4647&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;4647&lt;/code&gt;&lt;/a&gt; is generated (see the links for more information on what and when).&lt;/p&gt;

&lt;p&gt;These events are linked together by a common field called &lt;code&gt;Logon ID&lt;/code&gt;, which is a pseudo-unique value specific to a single login session. But there’s a catch - Windows doesn’t make it very easy to use this data because the value is buried in each event’s &lt;code&gt;Message&lt;/code&gt; field. The Event Viewer doesn’t allow you to sort or filter based on it, and this gets crumpled into a single, hard-to-read cell in a CSV export.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/12/windows_logon_session_evtx_parser_0.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is where the Windows Logon Session EVTX Parser comes in. Run the PowerShell script against a Windows Security event log and it will automatically find login and logout events, extract the relevant data from the &lt;code&gt;Message&lt;/code&gt; field, correlate events to identify login sessions, and present the findings in a neat table.&lt;/p&gt;

&lt;h4 id=&quot;testing-and-limitations&quot;&gt;Testing and limitations&lt;/h4&gt;

&lt;p&gt;Testing of the Windows Logon Session EVTX Parser is an ongoing process. The script is still a little rough around the edges (hopefully you’ll give me a pass on that one, given the circumstances under which I wrote it) and currently does not include error handling, so you may have to do some manual investigation if anything goes wrong. However, I have tested all the options (live and exported event logs, different verbosity levels, CSV and terminal-only output) and everything seems to be in working order.&lt;/p&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;The Windows Logon Session EVTX Parser is relatively easy to configure by directly editing the variables within the script itself. There are three primary settings that can be adjusted to your needs.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Variable&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Purpose&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$logFile&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;C:\temp\export.evtx&lt;/td&gt;
      &lt;td&gt;Either set to the path of an exported Windows Security event log EVTX file, or leave blank to use the live log (script must be run with administrator privileges if accessing live logs)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$verbosity&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Must be set to one of the three verbosity settings (&lt;a href=&quot;#verbosity&quot;&gt;see below&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$outputFile&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;C:\temp\logon_sessions.csv&lt;/td&gt;
      &lt;td&gt;Either set a path to write a CSV file of logon sessions to, or leave blank to print logon sessions to the terminal only&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Once the variables have been configured, the script can be run as a standard PowerShell script. If you wish to read the live event log, ensure that you are running the script from an administrator prompt.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evtx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;verbosity&quot;&gt;Verbosity&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;$verbosity&lt;/code&gt; variable is perhaps the one that requires the most explanation. There are three possible levels of verbosity, and each has its own benefits and caveats, detailed below.&lt;/p&gt;

&lt;p&gt;Setting &lt;code&gt;$verbosity&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; will exclude &lt;code&gt;SYSTEM&lt;/code&gt; account logons and limit output to complete logon sessions (i.e. those with events for both the user logging in and logging out). This provides the most concise results, but will exclude any active sessions that do not yet have logout events, meaning it is best used in scenarios where its is known that the subject of the investigation is no longer active.&lt;/p&gt;

&lt;p&gt;Setting &lt;code&gt;$verbosity&lt;/code&gt; to &lt;code&gt;2&lt;/code&gt; will still exclude &lt;code&gt;SYSTEM&lt;/code&gt; account logons, but include a row in the output for each other login event, even if it does not have an associated logout event. This is likely the most useful verbosity level in most scenarios, as the results will include active sessions.&lt;/p&gt;

&lt;p&gt;Setting &lt;code&gt;$verbosity&lt;/code&gt; to &lt;code&gt;3&lt;/code&gt; will include a row in the output for all logins, including those for the &lt;code&gt;SYSTEM&lt;/code&gt; account and those with no associated logout event. This setting provides the most complete output, but includes a lot of noise from the &lt;code&gt;SYSTEM&lt;/code&gt; account that you’ll probably need to filter out yourself.&lt;/p&gt;

&lt;h3 id=&quot;reading-the-output&quot;&gt;Reading the output&lt;/h3&gt;

&lt;p&gt;Assuming you’ve populated the &lt;code&gt;$outputFile&lt;/code&gt; variable, the Windows Logon Session EVTX Parser will drop a CSV containing output of your selected verbosity at your chosen path. In the example below, the script returned complete login sessions only (&lt;code&gt;$verbosity = 1&lt;/code&gt;), and I have filtered out service account events.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/12/windows_logon_session_evtx_parser_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The timestamp and event ID columns are self-explanatory, but you might be wondering why I decided to include both &lt;code&gt;LoginUserName&lt;/code&gt; and &lt;code&gt;LogoutUserName&lt;/code&gt;. This is because when the user logs in using a Microsoft account, the login event shows the email address and the logout event shows the short/local username, so this can therefore be a useful way of correlating the two to determine which are related.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LoginType&lt;/code&gt; shows &lt;a href=&quot;https://eventlogxp.com/blog/logon-type-what-does-it-mean/&quot; target=&quot;_blank&quot;&gt;the Windows logon type&lt;/a&gt;, which helps to understand &lt;em&gt;how&lt;/em&gt; the user logged on. In the example, I have highlighted a Type 3 (Network) logon to a shared folder from a virtual machine in orange, and a Type 4 (Batch) logon in green (this is actually the scheduled task for my backup utility, &lt;a href=&quot;/2021/01/01/backutil-windows-backup-utility&quot;&gt;Backutil&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I’d recommend opening the output CSV in Excel and playing around with filters - particularly if you’ve run the script at the higher verbosity levels - but I’m sure most people reading this are already familiar.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Use the link below to download the script. You’re free to run it as you wish - just please let me know if you encounter any bugs so I can work on fixing them in future releases!&lt;/p&gt;

&lt;p style=&quot;float: left; width: 90%; padding: 5px; padding-left: 15px; padding-right: 5%; margin: 30px 0 10px 0; font-style: italic; border-left: 5px solid red; background: #ff9999; color: #333;&quot;&gt;This script is a learning/hobby project and some aspects may not follow best practices. While you're welcome to use it, you do so at your own risk. Make sure you take a backup of your files before trying it out, and don't go running it in production without proper checks.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattcasmith/windows-logon-session-evtx-parser&quot;&gt;&lt;img src=&quot;/assets/images/download.png&quot; style=&quot;width: 50px&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattcasmith/windows-logon-session-evtx-parser&quot;&gt;Download WLSEP v0.1&lt;/a&gt;&lt;br /&gt;7KB, PS1&lt;/td&gt;
      &lt;td&gt;The PowerShell script is available to download directly from &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/mattcasmith/windows-logon-session-evtx-parser&quot;&gt;the Windows Logon Session EVTX Parser GitHub repository&lt;/a&gt;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;future-development&quot;&gt;Future development&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, the script is still rough in some areas, so when I have the time I would like to make a few improvements to tidy things up and improve functionality. These include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;General housekeeping&lt;/strong&gt; - The script was written in a single day while I was feeling rather groggy, so there are almost certainly omissions, inefficiencies, and so on that I’ll find on review.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Error handling&lt;/strong&gt; - The script will currently run to completion while throwing PowerShell errors if something goes wrong. I’d like to add some proper error handling to deal with that more gracefully.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Additional functionality&lt;/strong&gt; - I would consider adding the option to include further events associated with Windows login sessions (e.g. failed logins) to the results at some point in future, and possibly the capability for the configuration variables to be provided via the command line.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have you got more ideas for how the script could be improved? Or have you found bugs that I haven’t? Please &lt;a href=&quot;mailto:mattcasmith@protonmail.com&quot;&gt;send me an email&lt;/a&gt; to let me know so I can add them to the development backlog.&lt;/p&gt;

&lt;p&gt;If you’re interested in the project, check back regularly for new releases. I’ll also announce any updates on &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/mattcasmith&quot;&gt;my Twitter account&lt;/a&gt;, and may add some form of banner to &lt;a href=&quot;https://mattcasmith.net&quot;&gt;my site’s homepage&lt;/a&gt;.&lt;/p&gt;</content><author><name>mattcasmith</name></author><summary type="html">Faced with a day at home recovering from my most recent COVID-19 booster vaccine, I realised I hadn’t written anything more than a few lines of PowerShell in a while and decided to spend some time working on something interesting. The idea occurred to me to try to correlate Windows login sessions from the Security event log, and the Windows Logon Session EVTX Parser script is the result. Contents 1. Introduction           a. Testing and limitations 2. Configuration           a. Verbosity 3. Reading the output 4. Download 5. Future development Introduction The Windows Logon Session EVTX Parser is a script that reads either a live or an exported Windows Security event log and produces a list of login sessions, including the login and logout times. Granted, Windows event logs - and particularly these events - are likely among the first logs you would onboard to a security information and event management (SIEM) tool in a corporate environment, but there may be situations where data isn’t so accessible - for example, when investigating a host that has not been onboarded to the central repository, or a personal device involved in a forensics case. This script is a learning/hobby project and some aspects may not follow best practices. While you're welcome to use it, you do so at your own risk. Make sure you take a backup of your files before trying it out, and don't go running it in production without proper checks. The Windows Security event log generates events with the ID 4624 whenever a user logs in. These events contain a multitude of useful information, from the timestamp and username to the login type (e.g. local or remote) and - where relevant - the remote IP address used. When the user logs out, some combination of the events 4634 and 4647 is generated (see the links for more information on what and when). These events are linked together by a common field called Logon ID, which is a pseudo-unique value specific to a single login session. But there’s a catch - Windows doesn’t make it very easy to use this data because the value is buried in each event’s Message field. The Event Viewer doesn’t allow you to sort or filter based on it, and this gets crumpled into a single, hard-to-read cell in a CSV export. This is where the Windows Logon Session EVTX Parser comes in. Run the PowerShell script against a Windows Security event log and it will automatically find login and logout events, extract the relevant data from the Message field, correlate events to identify login sessions, and present the findings in a neat table. Testing and limitations Testing of the Windows Logon Session EVTX Parser is an ongoing process. The script is still a little rough around the edges (hopefully you’ll give me a pass on that one, given the circumstances under which I wrote it) and currently does not include error handling, so you may have to do some manual investigation if anything goes wrong. However, I have tested all the options (live and exported event logs, different verbosity levels, CSV and terminal-only output) and everything seems to be in working order. Configuration The Windows Logon Session EVTX Parser is relatively easy to configure by directly editing the variables within the script itself. There are three primary settings that can be adjusted to your needs. Variable Example Purpose $logFile C:\temp\export.evtx Either set to the path of an exported Windows Security event log EVTX file, or leave blank to use the live log (script must be run with administrator privileges if accessing live logs) $verbosity 1 Must be set to one of the three verbosity settings (see below) $outputFile C:\temp\logon_sessions.csv Either set a path to write a CSV file of logon sessions to, or leave blank to print logon sessions to the terminal only Once the variables have been configured, the script can be run as a standard PowerShell script. If you wish to read the live event log, ensure that you are running the script from an administrator prompt. .\windows-logon-session-evtx-parser.ps1 Verbosity The $verbosity variable is perhaps the one that requires the most explanation. There are three possible levels of verbosity, and each has its own benefits and caveats, detailed below. Setting $verbosity to 1 will exclude SYSTEM account logons and limit output to complete logon sessions (i.e. those with events for both the user logging in and logging out). This provides the most concise results, but will exclude any active sessions that do not yet have logout events, meaning it is best used in scenarios where its is known that the subject of the investigation is no longer active. Setting $verbosity to 2 will still exclude SYSTEM account logons, but include a row in the output for each other login event, even if it does not have an associated logout event. This is likely the most useful verbosity level in most scenarios, as the results will include active sessions. Setting $verbosity to 3 will include a row in the output for all logins, including those for the SYSTEM account and those with no associated logout event. This setting provides the most complete output, but includes a lot of noise from the SYSTEM account that you’ll probably need to filter out yourself. Reading the output Assuming you’ve populated the $outputFile variable, the Windows Logon Session EVTX Parser will drop a CSV containing output of your selected verbosity at your chosen path. In the example below, the script returned complete login sessions only ($verbosity = 1), and I have filtered out service account events. The timestamp and event ID columns are self-explanatory, but you might be wondering why I decided to include both LoginUserName and LogoutUserName. This is because when the user logs in using a Microsoft account, the login event shows the email address and the logout event shows the short/local username, so this can therefore be a useful way of correlating the two to determine which are related. LoginType shows the Windows logon type, which helps to understand how the user logged on. In the example, I have highlighted a Type 3 (Network) logon to a shared folder from a virtual machine in orange, and a Type 4 (Batch) logon in green (this is actually the scheduled task for my backup utility, Backutil). I’d recommend opening the output CSV in Excel and playing around with filters - particularly if you’ve run the script at the higher verbosity levels - but I’m sure most people reading this are already familiar. Download Use the link below to download the script. You’re free to run it as you wish - just please let me know if you encounter any bugs so I can work on fixing them in future releases! This script is a learning/hobby project and some aspects may not follow best practices. While you're welcome to use it, you do so at your own risk. Make sure you take a backup of your files before trying it out, and don't go running it in production without proper checks. Download WLSEP v0.17KB, PS1 The PowerShell script is available to download directly from the Windows Logon Session EVTX Parser GitHub repository. Future development As I mentioned earlier, the script is still rough in some areas, so when I have the time I would like to make a few improvements to tidy things up and improve functionality. These include: General housekeeping - The script was written in a single day while I was feeling rather groggy, so there are almost certainly omissions, inefficiencies, and so on that I’ll find on review. Error handling - The script will currently run to completion while throwing PowerShell errors if something goes wrong. I’d like to add some proper error handling to deal with that more gracefully. Additional functionality - I would consider adding the option to include further events associated with Windows login sessions (e.g. failed logins) to the results at some point in future, and possibly the capability for the configuration variables to be provided via the command line. Have you got more ideas for how the script could be improved? Or have you found bugs that I haven’t? Please send me an email to let me know so I can add them to the development backlog. If you’re interested in the project, check back regularly for new releases. I’ll also announce any updates on my Twitter account, and may add some form of banner to my site’s homepage.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/12/windows_logon_session_evtx_parser_0.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/12/windows_logon_session_evtx_parser_0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using Tkinter to build simple GUIs for Python apps</title><link href="https://mattcasmith.net/2022/08/21/using-tkinter-gui-python-apps" rel="alternate" type="text/html" title="Using Tkinter to build simple GUIs for Python apps" /><published>2022-08-21T01:00:00+01:00</published><updated>2022-08-21T01:00:00+01:00</updated><id>https://mattcasmith.net/2022/08/21/using-tkinter-gui-python-apps</id><content type="html" xml:base="https://mattcasmith.net/2022/08/21/using-tkinter-gui-python-apps">&lt;p&gt;I’ve written many Python scripts and apps in the past, including my Windows backup utility &lt;a href=&quot;/2021/01/01/backutil-windows-backup-utility&quot;&gt;Backutil&lt;/a&gt;, which is probably the my most complex project to date. But I’ve always designed these to run in the background or on the command line, and haven’t ever tried to build an app with a graphical user interface (GUI).&lt;/p&gt;

&lt;p&gt;I was recently studying for a few &lt;a href=&quot;/category/cyber-security&quot;&gt;cyber security&lt;/a&gt; certifications and realised it would be useful to have an app for displaying flashcards. There are probably a million solutions for this online already, but I thought it would be a good opportunity to learn how to add a GUI to control some simple Python functions. So I took to Google, looked up some tutorials, and cobbled something together on a Saturday afternoon.&lt;/p&gt;

&lt;p&gt;I’ll share the full code in future via GitHub and another blog post (there are still some more features I want to add), but for now I’ll focus on the GUI-related elements and how they connect to everything else.&lt;/p&gt;

&lt;h3 id=&quot;introducting-tkinter&quot;&gt;Introducting Tkinter&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/tkinter.html&quot; target=&quot;_blank&quot;&gt;Tkinter&lt;/a&gt; is a Python library that allows you to work with the Tcl/Tk GUI toolkit to create applications that will work across Windows, macOS, and Linux. You can visit the link to review the full documentation, but I’ll cover some of the basics I learnt and how I used them for my flashcards app in this post.&lt;/p&gt;

&lt;p&gt;As with any Python extension, the first step is to import the library.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tkinter&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tkinter&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttk&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To understand what comes next, it’s probably better to see what the end result looks like first, so here’s the very simple GUI that we’ll be constructing in the following code segments for the flashcards app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/08/tkinter-python_0.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have a main area that displays the content of the current flashcard, a button to flip the card to the other side, previous/next buttons and a counter to show the current position, and a button to reshuffle the deck into a new random order. There are also some keyboard shortcuts so the user doesn’t always need to navigate with the mouse. In the following sections, I’ll go over how each of these work.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-the-window-and-grid&quot;&gt;Setting up the window and grid&lt;/h3&gt;

&lt;p&gt;We need a canvas before we can do any painting, and in this case the canvas is the application’s main window - also known as &lt;code&gt;root&lt;/code&gt;. We can set this up with a few simple lines of code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Flashcards!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;400x400&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can probably already glean the basics just by reading this, but with &lt;code&gt;title&lt;/code&gt; we have set the window title to &lt;code&gt;Flashcards!&lt;/code&gt;, and with &lt;code&gt;geometry&lt;/code&gt; we have set the default window size to 400 by 400 pixels.&lt;/p&gt;

&lt;p&gt;Before we can place individual elements in our window, we need to establish a grid, which we’ll call &lt;code&gt;mainframe&lt;/code&gt;. The following lines create this frame and centre it with the compass-point &lt;code&gt;sticky&lt;/code&gt; attributes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sticky&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the grid itself set up, we can now apply attributes to the individual rows and columns. My basic GUI will require four rows, but only one of them needs any special configuration. I’m using &lt;code&gt;weight&lt;/code&gt; and &lt;code&gt;minsize&lt;/code&gt; on the second row to reserve plenty of space for the content of the cards.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rowconfigure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;295&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s our grid set up and formatted! To help you to visualise where we’re adding each button and label in the next section, here’s roughly how the grid aligns to the finished GUI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/08/tkinter-python_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the tweaks we made to the second row ensure there’s plenty of space in the middle in case the user provides lengthy content for their flashcards. You’ll probably also spot that the main card content and the Flip button don’t respect the column layout - we’ll see how to achieve this in a moment.&lt;/p&gt;

&lt;h3 id=&quot;buttons-labels-and-string-variables&quot;&gt;Buttons, labels, and string variables&lt;/h3&gt;

&lt;p&gt;Now we can get to placing the window contents - but we still have one more important job to do first. The text in the main card content section and the counter in the top right will need to change based on the user’s input, and to be able to update them we must establish them as &lt;code&gt;StringVar()&lt;/code&gt; variables.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;card_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;card_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we create each button and label individually and assign their attributes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ttk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Flip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flip_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnspan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sticky&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ttk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;&amp;lt;&amp;lt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sticky&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ttk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Shuffle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomise_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sticky&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ttk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sticky&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ttk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Verdana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textvariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wraplength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;390&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnspan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ttk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textvariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ttk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MattCASmith.net&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the brackets after each &lt;code&gt;Button&lt;/code&gt; or &lt;code&gt;Label&lt;/code&gt; is created, we first state which element it should be placed within (&lt;code&gt;mainframe&lt;/code&gt;) and then provide various configurations. There are three that are worth explaining:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;textvariable&lt;/code&gt; - used to assign the two &lt;code&gt;StringVar()&lt;/code&gt; variables we established to their respective labels. This is necessary for dynamic text. If the text is static, &lt;code&gt;text&lt;/code&gt; can be used instead&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;anchor&lt;/code&gt; - sets the alignment of the label text based on compass point values&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;command&lt;/code&gt; - links buttons to the Python functions that must be executed when they are clicked. For example, clicking the Shuffle button will execute the &lt;code&gt;randomise_data&lt;/code&gt; function&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the brackets after &lt;code&gt;grid&lt;/code&gt; we establish the placement of each element in the grid we set up earlier. The &lt;code&gt;column&lt;/code&gt; and &lt;code&gt;row&lt;/code&gt; numbers assign a cell to the element, and &lt;code&gt;sticky&lt;/code&gt; sets its alignment within that cell. An interesting attribute here is &lt;code&gt;columnspan&lt;/code&gt;, which allows an element to sit across multiple columns - as is the case here with the main content and the Shuffle button.&lt;/p&gt;

&lt;h3 id=&quot;keyboard-shortcuts&quot;&gt;Keyboard shortcuts&lt;/h3&gt;

&lt;p&gt;With our GUI mostly in place, we have an issue. When revising using a flashcards app, you’d want to be able to cycle quickly between the cards and flip them instantly to see whether you’re right or wrong. But at the moment our user needs to click on the corresponding buttons each time they want to change the view. So let’s fix that with some keyboard shortcuts so they can study at speed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;Left&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;Right&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;Return&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flip_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should be fairly self-explanatory, but essentially what each line achieves is to bind a Python function (&lt;code&gt;prev_card&lt;/code&gt;, &lt;code&gt;next_card&lt;/code&gt;, &lt;code&gt;flip_card&lt;/code&gt;) to a key (the left and right arrows and return, respectively), reducing the work required to cycle through cards and providing a much smoother user experience.&lt;/p&gt;

&lt;h3 id=&quot;drawing-the-window&quot;&gt;Drawing the window&lt;/h3&gt;

&lt;p&gt;There’s just a little more admin to do before our application will run properly. Firstly, let’s add some padding to each cell in the grid to space out our buttons and labels a little.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winfo_children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid_configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;padx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we use &lt;code&gt;mainloop()&lt;/code&gt; to run our application and draw the window. When execution reaches this line, the window will be drawn and the app will essentially sit idle awaiting user input, so it’s important this we did the necessary legwork beforehand to make sure everything is in place and presentable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainloop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And there you have it - this code (and the functions required to provide the actual functionality) should be all you need to create a very simple GUI application using Python. Flashcards! is currently at the minimum viable product stage - it’s perfectly usable as a study tool, but still rough round the edges. Once I’ve had a chance to spruce it up a bit I’ll be sure to share the full project code. Watch this space!&lt;/p&gt;</content><author><name>mattcasmith</name></author><summary type="html">I’ve written many Python scripts and apps in the past, including my Windows backup utility Backutil, which is probably the my most complex project to date. But I’ve always designed these to run in the background or on the command line, and haven’t ever tried to build an app with a graphical user interface (GUI). I was recently studying for a few cyber security certifications and realised it would be useful to have an app for displaying flashcards. There are probably a million solutions for this online already, but I thought it would be a good opportunity to learn how to add a GUI to control some simple Python functions. So I took to Google, looked up some tutorials, and cobbled something together on a Saturday afternoon. I’ll share the full code in future via GitHub and another blog post (there are still some more features I want to add), but for now I’ll focus on the GUI-related elements and how they connect to everything else. Introducting Tkinter Tkinter is a Python library that allows you to work with the Tcl/Tk GUI toolkit to create applications that will work across Windows, macOS, and Linux. You can visit the link to review the full documentation, but I’ll cover some of the basics I learnt and how I used them for my flashcards app in this post. As with any Python extension, the first step is to import the library. from tkinter import * from tkinter import ttk To understand what comes next, it’s probably better to see what the end result looks like first, so here’s the very simple GUI that we’ll be constructing in the following code segments for the flashcards app. As you can see, we have a main area that displays the content of the current flashcard, a button to flip the card to the other side, previous/next buttons and a counter to show the current position, and a button to reshuffle the deck into a new random order. There are also some keyboard shortcuts so the user doesn’t always need to navigate with the mouse. In the following sections, I’ll go over how each of these work. Setting up the window and grid We need a canvas before we can do any painting, and in this case the canvas is the application’s main window - also known as root. We can set this up with a few simple lines of code. root = Tk() root.title(&quot;Flashcards!&quot;) root.geometry(&quot;400x400&quot;) You can probably already glean the basics just by reading this, but with title we have set the window title to Flashcards!, and with geometry we have set the default window size to 400 by 400 pixels. Before we can place individual elements in our window, we need to establish a grid, which we’ll call mainframe. The following lines create this frame and centre it with the compass-point sticky attributes. mainframe = ttk.Frame(root, width=400, height=400) mainframe.grid(column=0, row=0, sticky=(N, W, E, S)) With the grid itself set up, we can now apply attributes to the individual rows and columns. My basic GUI will require four rows, but only one of them needs any special configuration. I’m using weight and minsize on the second row to reserve plenty of space for the content of the cards. mainframe.rowconfigure(1, weight=8, minsize=295) And that’s our grid set up and formatted! To help you to visualise where we’re adding each button and label in the next section, here’s roughly how the grid aligns to the finished GUI. Notice how the tweaks we made to the second row ensure there’s plenty of space in the middle in case the user provides lengthy content for their flashcards. You’ll probably also spot that the main card content and the Flip button don’t respect the column layout - we’ll see how to achieve this in a moment. Buttons, labels, and string variables Now we can get to placing the window contents - but we still have one more important job to do first. The text in the main card content section and the counter in the top right will need to change based on the user’s input, and to be able to update them we must establish them as StringVar() variables. card_content = StringVar() card_number = StringVar() Then we create each button and label individually and assign their attributes. ttk.Button(mainframe, text=&quot;Flip&quot;, command=flip_card).grid(column=1, row=2, columnspan=3, sticky=(W,E,S)) ttk.Button(mainframe, text=&quot;&amp;lt;&amp;lt;&amp;lt;&quot;, command=prev_card, width=15).grid(column=1, row=3, sticky=(W,S)) ttk.Button(mainframe, text=&quot;Shuffle&quot;, command=randomise_data, width=15).grid(column=2, row=3, sticky=S) ttk.Button(mainframe, text=&quot;&amp;gt;&amp;gt;&amp;gt;&quot;, command=next_card, width=15).grid(column=3, row=3, sticky=(E,S)) ttk.Label(mainframe, font=&quot;Verdana&quot;, textvariable=card_content, wraplength=390, anchor=&quot;center&quot;, width=38).grid(column=1, row=1, columnspan=3) ttk.Label(mainframe, textvariable=card_number, anchor=&quot;e&quot;, width=15).grid(column=3, row=0) ttk.Label(mainframe, text=&quot;MattCASmith.net&quot;, anchor=&quot;w&quot;, width=17).grid(column=1, row=0) In the brackets after each Button or Label is created, we first state which element it should be placed within (mainframe) and then provide various configurations. There are three that are worth explaining: textvariable - used to assign the two StringVar() variables we established to their respective labels. This is necessary for dynamic text. If the text is static, text can be used instead anchor - sets the alignment of the label text based on compass point values command - links buttons to the Python functions that must be executed when they are clicked. For example, clicking the Shuffle button will execute the randomise_data function In the brackets after grid we establish the placement of each element in the grid we set up earlier. The column and row numbers assign a cell to the element, and sticky sets its alignment within that cell. An interesting attribute here is columnspan, which allows an element to sit across multiple columns - as is the case here with the main content and the Shuffle button. Keyboard shortcuts With our GUI mostly in place, we have an issue. When revising using a flashcards app, you’d want to be able to cycle quickly between the cards and flip them instantly to see whether you’re right or wrong. But at the moment our user needs to click on the corresponding buttons each time they want to change the view. So let’s fix that with some keyboard shortcuts so they can study at speed. root.bind('&amp;lt;Left&amp;gt;', prev_card) root.bind('&amp;lt;Right&amp;gt;', next_card) root.bind('&amp;lt;Return&amp;gt;', flip_card) This should be fairly self-explanatory, but essentially what each line achieves is to bind a Python function (prev_card, next_card, flip_card) to a key (the left and right arrows and return, respectively), reducing the work required to cycle through cards and providing a much smoother user experience. Drawing the window There’s just a little more admin to do before our application will run properly. Firstly, let’s add some padding to each cell in the grid to space out our buttons and labels a little. for child in mainframe.winfo_children(): child.grid_configure(padx=5, pady=5) Finally, we use mainloop() to run our application and draw the window. When execution reaches this line, the window will be drawn and the app will essentially sit idle awaiting user input, so it’s important this we did the necessary legwork beforehand to make sure everything is in place and presentable. root.mainloop() And there you have it - this code (and the functions required to provide the actual functionality) should be all you need to create a very simple GUI application using Python. Flashcards! is currently at the minimum viable product stage - it’s perfectly usable as a study tool, but still rough round the edges. Once I’ve had a chance to spruce it up a bit I’ll be sure to share the full project code. Watch this space!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/08/tkinter-python_0.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/08/tkinter-python_0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Linux .bash_history: Basics, behaviours, and forensics</title><link href="https://mattcasmith.net/2022/02/22/bash-history-basics-behaviours-forensics" rel="alternate" type="text/html" title="Linux .bash&amp;#95;history&amp;#58; Basics, behaviours, and forensics" /><published>2022-02-22T00:00:00+00:00</published><updated>2022-02-22T00:00:00+00:00</updated><id>https://mattcasmith.net/2022/02/22/bash-history-basics-behaviours-forensics</id><content type="html" xml:base="https://mattcasmith.net/2022/02/22/bash-history-basics-behaviours-forensics">&lt;p&gt;During any incident investigation on a Linux system, one of the most valuable things for responders and forensicators to establish is which commands were run. This is key to finding out what an attacker or malicious user was attempting to do, and what remediation activities are required.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.bash_history&lt;/code&gt; file, located in each user’s home directory, is usually the investigator’s first stop for this information. This file contains a list of Bash commands recently run by the user and may appear relatively simple at first glance, but there are many ins and outs to its behaviours.&lt;/p&gt;

&lt;p&gt;Most importantly, commands entered in a running Bash terminal are stored in memory and are only written to the file when the terminal is closed. As you can imagine, this means many caveats can be applied to the file’s contents, and in this post I aim to cover some of the most common scenarios, how they affect &lt;code&gt;.bash_history&lt;/code&gt;, and alternatives when it does not contain the activity you are looking for.&lt;/p&gt;

&lt;h3 id=&quot;contents&quot;&gt;Contents&lt;/h3&gt;

&lt;p&gt;1. &lt;a href=&quot;#bash_history-behaviours&quot;&gt;&lt;code&gt;.bash_history&lt;/code&gt; behaviours&lt;/a&gt;&lt;br /&gt;
          a. &lt;a href=&quot;#first-a-note-on-the-histcontrol-variable&quot;&gt;The &lt;code&gt;$HISTCONTROL&lt;/code&gt; variable&lt;/a&gt;&lt;br /&gt;
          b. &lt;a href=&quot;#the-history-command-outputs-a-combined-history-from-bash_history-and-memory&quot;&gt;The &lt;code&gt;history&lt;/code&gt; command&lt;/a&gt;&lt;br /&gt;
          c. &lt;a href=&quot;#commands-are-written-to-bash_history-in-the-order-terminals-are-closed-not-the-order-they-are-run&quot;&gt;Terminal windows and command order&lt;/a&gt;&lt;br /&gt;
          d. &lt;a href=&quot;#commands-run-with-logical-and--appear-as-a-single-entry-in-bash_history&quot;&gt;Logical AND (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;)&lt;/a&gt;&lt;br /&gt;
          e. &lt;a href=&quot;#commands-run-within-scripts-are-not-reflected-in-bash_history&quot;&gt;Commands within scripts&lt;/a&gt;&lt;br /&gt;
          f. &lt;a href=&quot;#if-a-terminal-is-stopped-with-the-kill-command-commands-are-still-written-to-bash_history&quot;&gt;The &lt;code&gt;kill&lt;/code&gt; command&lt;/a&gt;&lt;br /&gt;
          g. &lt;a href=&quot;#however-if-the--sigkill-switch-is-used-commands-are-not-written-to-bash_history&quot;&gt;The &lt;code&gt;-SIGKILL&lt;/code&gt; switch&lt;/a&gt;&lt;br /&gt;
          h. &lt;a href=&quot;#ssh-sessions-behave-in-a-similar-way-to-standard-terminals&quot;&gt;SSH sessions&lt;/a&gt;&lt;br /&gt;
2. &lt;a href=&quot;#finding-bash-commands-in-memory&quot;&gt;Finding Bash commands in memory&lt;/a&gt;&lt;br /&gt;
3. &lt;a href=&quot;#further-reading&quot;&gt;Further reading&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bash_history-behaviours&quot;&gt;&lt;code&gt;.bash_history&lt;/code&gt; behaviours&lt;/h3&gt;

&lt;p&gt;To test exactly when commands are and aren’t recorded to the user’s &lt;code&gt;.bash_history&lt;/code&gt; file, I ran a series of tests covering common scenarios in which commands might be run. All of these tests were run on a clean installation of CentOS. Here’s what I found…&lt;/p&gt;

&lt;h4 id=&quot;first-a-note-on-the-histcontrol-variable&quot;&gt;First, a note on the &lt;code&gt;$HISTCONTROL&lt;/code&gt; variable…&lt;/h4&gt;

&lt;p&gt;It is important to check the contents of the &lt;code&gt;$HISTCONTROL&lt;/code&gt; variable on the subject system (after taking images and preserving evidence, so you’re not overwriting &lt;code&gt;.bash_history&lt;/code&gt; with your own commands) as this has a potentially significant bearing on which commands will be written to the file.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;echo $HISTCONTROL&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The command above will return one of the following strings. The table below details which commands &lt;code&gt;.bash_history&lt;/code&gt; will ignore when each of the possible values is present.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;$HISTCONTROL value&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ignorespace&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Excludes commands with a preceding space&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ignoredups&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Excludes subsequent duplicate commands&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ignorespace:ignoredups&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Excludes both commands with a preceding space and subsequent duplicates&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ignoreboth&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Excludes both commands with a preceding space and subsequent duplicates&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Therefore if the system has one of these values in the &lt;code&gt;$HISTCONTROL&lt;/code&gt; variable, there may be commands missing from &lt;code&gt;.bash_history&lt;/code&gt;. If it is set to &lt;code&gt;ignorespace&lt;/code&gt; and the attacker is aware, they could even just slip in a space before each of their commands and write nothing to the history file at all!&lt;/p&gt;

&lt;p&gt;The CentOS system where I performed the testing for this post had &lt;code&gt;$HISTCONTROL&lt;/code&gt; set to &lt;code&gt;ignoredups&lt;/code&gt;. However, I also performed checks across other Linux distros I had available (namely Kali, Tsurugi, and Windows Subsystem for Linux) and it was set to &lt;code&gt;ignoreboth&lt;/code&gt; for them all. So it’s important to check what you’re dealing with on the particular system you’re investigating.&lt;/p&gt;

&lt;p&gt;It’s also trivial to change the contents of the &lt;code&gt;$HISTCONTROL&lt;/code&gt; variable to exclude more commands from &lt;code&gt;.bash_history&lt;/code&gt;, so watch out for evidence it has changed, which will look something like the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;export HISTCONTROL=ignoreboth&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;the-history-command-outputs-a-combined-history-from-bash_history-and-memory&quot;&gt;The &lt;code&gt;history&lt;/code&gt; command outputs a combined history from &lt;code&gt;.bash_history&lt;/code&gt; and memory.&lt;/h4&gt;

&lt;p&gt;On a live Linux system, you might run the &lt;code&gt;history&lt;/code&gt; command in a terminal window to review recently executed commands. The output of this command combines both the contents of &lt;code&gt;.bash_history&lt;/code&gt; and any commands held in memory from the current session.&lt;/p&gt;

&lt;p&gt;In the example below, we can see that the test command &lt;code&gt;doesthiscommandshowinhistory?&lt;/code&gt; is returned by the &lt;code&gt;history&lt;/code&gt; command on the left, but has not yet been written to disk as shown on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/02/bash-history_0.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bear in mind that &lt;code&gt;history&lt;/code&gt; will show commands from the memory of only the current Bash terminal - it won’t have access to those belonging to other processes. Since you won’t have access to the attacker’s terminal (unless the incident response team directly interrupted a hands-on-keyboard session), this means it won’t usually be much more useful than &lt;code&gt;.bash_history&lt;/code&gt; itself.&lt;/p&gt;

&lt;h4 id=&quot;commands-are-written-to-bash_history-in-the-order-terminals-are-closed-not-the-order-they-are-run&quot;&gt;Commands are written to &lt;code&gt;.bash_history&lt;/code&gt; in the order terminals are closed, not the order they are run.&lt;/h4&gt;

&lt;p&gt;For this test, I opened two Bash terminals and ran example commands containing text stating which terminal they belonged to and in which order they were run. As I closed the first terminal before the second, you can see that both of its commands appear first in &lt;code&gt;.bash_history&lt;/code&gt;, even though some of the second terminal’s commands were run first. It is the order the Bash processes end that matters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/02/bash-history_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As was discussed before, note that if we had run the &lt;code&gt;history&lt;/code&gt; command in one of these terminals, it would only have returned its own commands because each process has its own space in memory.&lt;/p&gt;

&lt;h4 id=&quot;commands-run-with-logical-and--appear-as-a-single-entry-in-bash_history&quot;&gt;Commands run with logical AND (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;) appear as a single entry in &lt;code&gt;.bash_history&lt;/code&gt;.&lt;/h4&gt;

&lt;p&gt;If we string several commands together using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; - a technique often used to save time (or in less innocent circumstances to avoid an attacker having to submit commands multiple times and risk attracting unwanted attention) - they will still only appear as one line in &lt;code&gt;.bash_history&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/02/bash-history_1.1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is an important detail as investigators and forensicators, as it preserves the original context in which these commands were run. If they were run back-to-back in this manner, this invites the question: “Why?”&lt;/p&gt;

&lt;h4 id=&quot;commands-run-within-scripts-are-not-reflected-in-bash_history&quot;&gt;Commands run within scripts are not reflected in &lt;code&gt;.bash_history&lt;/code&gt;.&lt;/h4&gt;

&lt;p&gt;To see whether commands in scripts are added to &lt;code&gt;.bash_history&lt;/code&gt; or not, I created a script called &lt;code&gt;folder_test.sh&lt;/code&gt; that would create a new folder, navigate into it, list the contents, navigate back up a level, and then delete the folder. You can see its contents in the left-hand window below.&lt;/p&gt;

&lt;p&gt;On the right, I ran the script with &lt;code&gt;./folder_test.sh&lt;/code&gt;. We know it executed successfully because the contents (i.e. nothing) are printed to the terminal. However, when we check the output of the &lt;code&gt;history&lt;/code&gt; command we can see that although the command that &lt;em&gt;ran&lt;/em&gt; the script was recorded, commands run &lt;em&gt;within&lt;/em&gt; the script were not - an important distinction to remember when investigating Linux systems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/02/bash-history_1.2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means that our attacker could potentially download or create a script named something innocuous like &lt;code&gt;file_cleanup.sh&lt;/code&gt;, execute it, and we would be none the wiser as to what it did based on the contents of &lt;code&gt;.bash_history&lt;/code&gt;. There would likely be artefacts elsewhere on the system to give us a clue as to what they were trying to do, but that’s a different topic for another day.&lt;/p&gt;

&lt;h4 id=&quot;if-a-terminal-is-stopped-with-the-kill-command-commands-are-still-written-to-bash_history&quot;&gt;If a terminal is stopped with the &lt;code&gt;kill&lt;/code&gt; command, commands are still written to &lt;code&gt;.bash_history&lt;/code&gt;.&lt;/h4&gt;

&lt;p&gt;This one was simple enough to test. I ran the command &lt;code&gt;doesthiscommandappearinhistory?&lt;/code&gt; in a terminal, then opened a new terminal and killed it using its process ID, then checked &lt;code&gt;.bash_history&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see below, despite the Bash instance being killed, the command was still written to the log (the following &lt;code&gt;echo $$&lt;/code&gt; command was the one I used to identify the process ID of that terminal).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/02/bash-history_2.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;however-if-the--sigkill-switch-is-used-commands-are-not-written-to-bash_history&quot;&gt;However, if the &lt;code&gt;-SIGKILL&lt;/code&gt; switch is used, commands are not written to &lt;code&gt;.bash_history&lt;/code&gt;.&lt;/h4&gt;

&lt;p&gt;More useful for red teamers - and something to bear in mind for blue teamers - is that &lt;code&gt;.bash_history&lt;/code&gt; is not written if the terminal is killed with the &lt;code&gt;-SIGKILL&lt;/code&gt; switch. Repeating the same experiment as above but with the additional switch meant no commands were written to disk.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/02/bash-history_3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is because by default &lt;code&gt;kill&lt;/code&gt; sends the &lt;code&gt;SIGTERM&lt;/code&gt; signal, which gracefully kills the process and allows Bash to write to &lt;code&gt;.bash_history&lt;/code&gt; as it is closing down. &lt;code&gt;SIGKILL&lt;/code&gt;, on the other hand, kills the process immediately before the commands can be written to the file.&lt;/p&gt;

&lt;h4 id=&quot;ssh-sessions-behave-in-a-similar-way-to-standard-terminals&quot;&gt;SSH sessions behave in a similar way to standard terminals.&lt;/h4&gt;

&lt;p&gt;If we run commands within an SSH session and then quit with &lt;code&gt;exit&lt;/code&gt; or by closing the window, &lt;code&gt;.bash_history&lt;/code&gt; is written in much the same way as it usually would be. The same also applies if we close the Command Prompt running the SSH session with Task Manager - presumably because Windows gives it time to tear down the connection in the background.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/02/bash-history_4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interestingly, if connecting via SSH from a Linux terminal, running a standard &lt;code&gt;kill&lt;/code&gt; command against the terminal will not close it until the user has ended the SSH session themselves. Using the &lt;code&gt;-SIGKILL&lt;/code&gt; switch ends the terminal process and SSH session immediately, but still writes the commands run during the session to the user’s &lt;code&gt;.bash_history&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This is likely because this is the work of &lt;code&gt;sshd&lt;/code&gt;, which sees its client kill the connection but itself closes gracefully. If we use &lt;code&gt;kill&lt;/code&gt; directly on &lt;code&gt;sshd&lt;/code&gt; itself - even with the &lt;code&gt;-SIGKILL&lt;/code&gt; switch - commands are still written to the file, which makes me wonder whether there is actually a way around this for SSH sessions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/02/bash-history_5.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;finding-bash-commands-in-memory&quot;&gt;Finding Bash commands in memory&lt;/h3&gt;

&lt;p&gt;All the tests above showed when commands are and are not written to the on-disk &lt;code&gt;.bash_history&lt;/code&gt; file. Now let’s see what we can do when an attacker has an active session (and therefore commands in memory) but either &lt;code&gt;.bash_history&lt;/code&gt; has not been written yet or they have cleared its contents. This may also work for recently closed Bash terminal sessions that did not end gracefully.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is take a memory image of the Linux system - for this we can use a tool called &lt;a href=&quot;https://github.com/504ensicsLabs/LiME&quot; target=&quot;_blank&quot;&gt;Linux Memory Extractor (LiME)&lt;/a&gt;. In a live incident scenario there are mechanisms to push the image to external storage or across the network, but I ran a basic command to create it locally.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo insmod lime-4.18.0-240.22.1.el8_3.x86_64.ko “path=/mem-img.mem format=lime”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To analyse our new memory image, we’ll use &lt;a href=&quot;https://www.volatilityfoundation.org/&quot; target=&quot;_blank&quot;&gt;Volatility&lt;/a&gt;, which is currently considered the pinnacle of memory forensics toolkits. It’s not quite as simple to run Volatility against Linux memory images as it is for Windows images. I won’t go into the full process here, but you need to &lt;a href=&quot;https://github.com/volatilityfoundation/volatility/wiki/Linux&quot; target=&quot;_blank&quot;&gt;create your own profile&lt;/a&gt; for the specific Linux distro and kernel version from which the image was captured.&lt;/p&gt;

&lt;p&gt;Once the profile is in place and ready to go, we can run Volatility’s &lt;code&gt;linux_bash&lt;/code&gt; module with the following command to search for Bash commands held in memory.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;python2 vol.py -f mem-img.mem –profile=LinuxCentOSx64 linux_bash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the screenshot below, you can see a small extract from the results, are ordered first by the process ID of the Bash terminal to which the commands belonged and then by the time they were run. This includes commands that were run too recently to have been written to &lt;code&gt;.bash_history&lt;/code&gt;, and towards the bottom you’ll even see the commands I ran to set up and run LiME.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/02/bash-history_6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One small word of warning regarding timestamps… Everything from the &lt;code&gt;ls&lt;/code&gt; command at &lt;code&gt;15:59:18&lt;/code&gt; downwards appears to be correct, but you’ll probably notice that all the commands above that allegedly ran at exactly the same second, which is obviously not right. Further investigation is needed to work out why exactly that is, but it’s likely that there is some limit to the number of Bash command timestamps stored in memory, or that Volatility cannot always read them accurately.&lt;/p&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;

&lt;p&gt;The links below lead to pages that either inspired this post or provided useful information to compile it, including some more in-depth technical information on various features discussed above.&lt;/p&gt;

&lt;p&gt;• &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Bash-History-Facilities.html&quot; target=&quot;_blank&quot;&gt;Bash history manual page&lt;/a&gt; (gnu.org)&lt;br /&gt;
• &lt;a href=&quot;https://www.geeksforgeeks.org/histcontrol-command-in-linux-with-examples/&quot; target=&quot;_blank&quot;&gt;$HISTCONTROL command in Linux with examples&lt;/a&gt; (geeksforgeeks.org)&lt;br /&gt;
• &lt;a href=&quot;https://linuxhandbook.com/sigterm-vs-sigkill/&quot; target=&quot;_blank&quot;&gt;SIGINT vs SIGKILL&lt;/a&gt; (linuxhandbook.com)&lt;br /&gt;
• &lt;a href=&quot;https://github.com/volatilityfoundation/volatility/wiki/Linux&quot; target=&quot;_blank&quot;&gt;Volatility Linux documentation&lt;/a&gt; (github.com)&lt;br /&gt;
• &lt;a href=&quot;https://www.crowdstrike.com/blog/how-to-extract-memory-information-to-spot-linux-malware/&quot; target=&quot;_blank&quot;&gt;How to extract memory information to spot Linux malware&lt;/a&gt; (crowdstrike.com)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updated 25/02/2022 to add section on the $HISTCONTROL variable.&lt;/em&gt;&lt;/p&gt;</content><author><name>mattcasmith</name></author><summary type="html">During any incident investigation on a Linux system, one of the most valuable things for responders and forensicators to establish is which commands were run. This is key to finding out what an attacker or malicious user was attempting to do, and what remediation activities are required. The .bash_history file, located in each user’s home directory, is usually the investigator’s first stop for this information. This file contains a list of Bash commands recently run by the user and may appear relatively simple at first glance, but there are many ins and outs to its behaviours. Most importantly, commands entered in a running Bash terminal are stored in memory and are only written to the file when the terminal is closed. As you can imagine, this means many caveats can be applied to the file’s contents, and in this post I aim to cover some of the most common scenarios, how they affect .bash_history, and alternatives when it does not contain the activity you are looking for. Contents 1. .bash_history behaviours           a. The $HISTCONTROL variable           b. The history command           c. Terminal windows and command order           d. Logical AND (&amp;amp;&amp;amp;)           e. Commands within scripts           f. The kill command           g. The -SIGKILL switch           h. SSH sessions 2. Finding Bash commands in memory 3. Further reading .bash_history behaviours To test exactly when commands are and aren’t recorded to the user’s .bash_history file, I ran a series of tests covering common scenarios in which commands might be run. All of these tests were run on a clean installation of CentOS. Here’s what I found… First, a note on the $HISTCONTROL variable… It is important to check the contents of the $HISTCONTROL variable on the subject system (after taking images and preserving evidence, so you’re not overwriting .bash_history with your own commands) as this has a potentially significant bearing on which commands will be written to the file. echo $HISTCONTROL The command above will return one of the following strings. The table below details which commands .bash_history will ignore when each of the possible values is present. $HISTCONTROL value Description ignorespace Excludes commands with a preceding space ignoredups Excludes subsequent duplicate commands ignorespace:ignoredups Excludes both commands with a preceding space and subsequent duplicates ignoreboth Excludes both commands with a preceding space and subsequent duplicates Therefore if the system has one of these values in the $HISTCONTROL variable, there may be commands missing from .bash_history. If it is set to ignorespace and the attacker is aware, they could even just slip in a space before each of their commands and write nothing to the history file at all! The CentOS system where I performed the testing for this post had $HISTCONTROL set to ignoredups. However, I also performed checks across other Linux distros I had available (namely Kali, Tsurugi, and Windows Subsystem for Linux) and it was set to ignoreboth for them all. So it’s important to check what you’re dealing with on the particular system you’re investigating. It’s also trivial to change the contents of the $HISTCONTROL variable to exclude more commands from .bash_history, so watch out for evidence it has changed, which will look something like the following: export HISTCONTROL=ignoreboth The history command outputs a combined history from .bash_history and memory. On a live Linux system, you might run the history command in a terminal window to review recently executed commands. The output of this command combines both the contents of .bash_history and any commands held in memory from the current session. In the example below, we can see that the test command doesthiscommandshowinhistory? is returned by the history command on the left, but has not yet been written to disk as shown on the right. Bear in mind that history will show commands from the memory of only the current Bash terminal - it won’t have access to those belonging to other processes. Since you won’t have access to the attacker’s terminal (unless the incident response team directly interrupted a hands-on-keyboard session), this means it won’t usually be much more useful than .bash_history itself. Commands are written to .bash_history in the order terminals are closed, not the order they are run. For this test, I opened two Bash terminals and ran example commands containing text stating which terminal they belonged to and in which order they were run. As I closed the first terminal before the second, you can see that both of its commands appear first in .bash_history, even though some of the second terminal’s commands were run first. It is the order the Bash processes end that matters. As was discussed before, note that if we had run the history command in one of these terminals, it would only have returned its own commands because each process has its own space in memory. Commands run with logical AND (&amp;amp;&amp;amp;) appear as a single entry in .bash_history. If we string several commands together using &amp;amp;&amp;amp; - a technique often used to save time (or in less innocent circumstances to avoid an attacker having to submit commands multiple times and risk attracting unwanted attention) - they will still only appear as one line in .bash_history. This is an important detail as investigators and forensicators, as it preserves the original context in which these commands were run. If they were run back-to-back in this manner, this invites the question: “Why?” Commands run within scripts are not reflected in .bash_history. To see whether commands in scripts are added to .bash_history or not, I created a script called folder_test.sh that would create a new folder, navigate into it, list the contents, navigate back up a level, and then delete the folder. You can see its contents in the left-hand window below. On the right, I ran the script with ./folder_test.sh. We know it executed successfully because the contents (i.e. nothing) are printed to the terminal. However, when we check the output of the history command we can see that although the command that ran the script was recorded, commands run within the script were not - an important distinction to remember when investigating Linux systems. This means that our attacker could potentially download or create a script named something innocuous like file_cleanup.sh, execute it, and we would be none the wiser as to what it did based on the contents of .bash_history. There would likely be artefacts elsewhere on the system to give us a clue as to what they were trying to do, but that’s a different topic for another day. If a terminal is stopped with the kill command, commands are still written to .bash_history. This one was simple enough to test. I ran the command doesthiscommandappearinhistory? in a terminal, then opened a new terminal and killed it using its process ID, then checked .bash_history. As you can see below, despite the Bash instance being killed, the command was still written to the log (the following echo $$ command was the one I used to identify the process ID of that terminal). However, if the -SIGKILL switch is used, commands are not written to .bash_history. More useful for red teamers - and something to bear in mind for blue teamers - is that .bash_history is not written if the terminal is killed with the -SIGKILL switch. Repeating the same experiment as above but with the additional switch meant no commands were written to disk. This is because by default kill sends the SIGTERM signal, which gracefully kills the process and allows Bash to write to .bash_history as it is closing down. SIGKILL, on the other hand, kills the process immediately before the commands can be written to the file. SSH sessions behave in a similar way to standard terminals. If we run commands within an SSH session and then quit with exit or by closing the window, .bash_history is written in much the same way as it usually would be. The same also applies if we close the Command Prompt running the SSH session with Task Manager - presumably because Windows gives it time to tear down the connection in the background. Interestingly, if connecting via SSH from a Linux terminal, running a standard kill command against the terminal will not close it until the user has ended the SSH session themselves. Using the -SIGKILL switch ends the terminal process and SSH session immediately, but still writes the commands run during the session to the user’s .bash_history file. This is likely because this is the work of sshd, which sees its client kill the connection but itself closes gracefully. If we use kill directly on sshd itself - even with the -SIGKILL switch - commands are still written to the file, which makes me wonder whether there is actually a way around this for SSH sessions. Finding Bash commands in memory All the tests above showed when commands are and are not written to the on-disk .bash_history file. Now let’s see what we can do when an attacker has an active session (and therefore commands in memory) but either .bash_history has not been written yet or they have cleared its contents. This may also work for recently closed Bash terminal sessions that did not end gracefully. The first thing we need to do is take a memory image of the Linux system - for this we can use a tool called Linux Memory Extractor (LiME). In a live incident scenario there are mechanisms to push the image to external storage or across the network, but I ran a basic command to create it locally. sudo insmod lime-4.18.0-240.22.1.el8_3.x86_64.ko “path=/mem-img.mem format=lime” To analyse our new memory image, we’ll use Volatility, which is currently considered the pinnacle of memory forensics toolkits. It’s not quite as simple to run Volatility against Linux memory images as it is for Windows images. I won’t go into the full process here, but you need to create your own profile for the specific Linux distro and kernel version from which the image was captured. Once the profile is in place and ready to go, we can run Volatility’s linux_bash module with the following command to search for Bash commands held in memory. python2 vol.py -f mem-img.mem –profile=LinuxCentOSx64 linux_bash In the screenshot below, you can see a small extract from the results, are ordered first by the process ID of the Bash terminal to which the commands belonged and then by the time they were run. This includes commands that were run too recently to have been written to .bash_history, and towards the bottom you’ll even see the commands I ran to set up and run LiME. One small word of warning regarding timestamps… Everything from the ls command at 15:59:18 downwards appears to be correct, but you’ll probably notice that all the commands above that allegedly ran at exactly the same second, which is obviously not right. Further investigation is needed to work out why exactly that is, but it’s likely that there is some limit to the number of Bash command timestamps stored in memory, or that Volatility cannot always read them accurately. Further reading The links below lead to pages that either inspired this post or provided useful information to compile it, including some more in-depth technical information on various features discussed above. • Bash history manual page (gnu.org) • $HISTCONTROL command in Linux with examples (geeksforgeeks.org) • SIGINT vs SIGKILL (linuxhandbook.com) • Volatility Linux documentation (github.com) • How to extract memory information to spot Linux malware (crowdstrike.com) Updated 25/02/2022 to add section on the $HISTCONTROL variable.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/02/bash-history_1.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/02/bash-history_1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SANS Holiday Hack Challenge 2021: Slot machine walkthrough</title><link href="https://mattcasmith.net/2022/01/08/sans-holiday-hack-2021-slot-machine" rel="alternate" type="text/html" title="SANS Holiday Hack Challenge 2021&amp;#58; Slot machine walkthrough" /><published>2022-01-08T00:01:00+00:00</published><updated>2022-01-08T00:01:00+00:00</updated><id>https://mattcasmith.net/2022/01/08/sans-holiday-hack-2021-slot-machine</id><content type="html" xml:base="https://mattcasmith.net/2022/01/08/sans-holiday-hack-2021-slot-machine">&lt;p&gt;Here’s one more writeup from the &lt;a href=&quot;https://www.sans.org/mlp/holiday-hack-challenge/&quot; target=&quot;_blank&quot;&gt;SANS Holiday Hack Challenge&lt;/a&gt;! The slot machine hack was one of the showpiece challenges this year, so I thought I’d put together a quick blog post to guide you through the process of identifying and exploiting a vulnerability in the game.&lt;/p&gt;

&lt;h3 id=&quot;the-challenge&quot;&gt;The challenge&lt;/h3&gt;

&lt;p&gt;Our task is clear enough. We’re given a link to an online slot machine and the following request:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Test the security of Jack Frost’s slot machines. What does the Jack Frost Tower casino security team threaten to do when your coin total exceeds 1,000? Submit the string in the server &lt;code&gt;data.response&lt;/code&gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s follow the link and take a look at the slot machine. It’s fairly typical for such games (at least as per my understanding following &lt;a href=&quot;/2019/08/26/im-back-def-con-inspired-hacking/&quot;&gt;a short trip to Las Vegas for Black Hat and Def Con&lt;/a&gt;). You can choose various options before placing a bet by hitting the Spin button. Your credit is updated based on the outcome.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-slots_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since our objective is to hit more than 1,000 credit, we &lt;em&gt;could&lt;/em&gt; just play the slots for a long time to try to get lucky. But that would take forever. Instead, let’s take under the hood to see what we can hack…&lt;/p&gt;

&lt;h3 id=&quot;observing-requests&quot;&gt;Observing requests&lt;/h3&gt;

&lt;p&gt;Like any web application, the slot machine must be communicating with a server behind the scenes to make playing the game possible. By using the Burp Suite proxy’s intercept function, we can hold requests and responses between the web browser and the server to give us time to review their contents and see what’s going on when we place a bet. Here’s what is sent when we hit the Spin button…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-slots_2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This looks like a pretty standard web request. We can see that this is a &lt;code&gt;POST&lt;/code&gt; request, which means that the client is transmitting information to the server (&lt;code&gt;slots.jackfrosttower.com&lt;/code&gt;). We can see that the request provides some cookie information, details about the page we’re on and our user agent, and so on. This is all pretty normal for this kind of request. But what about that last line?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;betamount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Comparing these variable names to the GUI, we can ascertain that this is our browser telling the server how much we’re betting, the number of lines we’re betting on, and the cost per line. Interesting. By tweaking these values, we might be able to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change the bet amount to a bigger stake than we can actually afford&lt;/li&gt;
  &lt;li&gt;Bet on more lines than actually exist on the slot machine&lt;/li&gt;
  &lt;li&gt;Adjust the cost per line to alter the slot machine’s financial calculations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here, it’s a matter of trial and error. Attempting the first two potential exploits returns a &lt;code&gt;Server Error&lt;/code&gt; response. That leaves only one option - but how can we use the &lt;code&gt;cpl&lt;/code&gt; variable to our advantage?&lt;/p&gt;

&lt;h3 id=&quot;crafting-a-malicious-request&quot;&gt;Crafting a malicious request&lt;/h3&gt;

&lt;p&gt;So here’s the plan: We’re going to set &lt;code&gt;cpl&lt;/code&gt; to a negative value to confuse the game if this input isn’t validated. For example, if we set it to &lt;code&gt;-100&lt;/code&gt; and there are 20 lines to play, that spin would cost us -2,000 credits to play and therefore actually &lt;em&gt;increase&lt;/em&gt; our credit by 2,000 (and any winnings from the spin).&lt;/p&gt;

&lt;p&gt;To do this, we hit the Spin button on the slot machine’s GUI. Burp Suite intercepts the request. We must very quickly change the &lt;code&gt;cpl&lt;/code&gt; value to &lt;code&gt;-100&lt;/code&gt; and hit the Forward button before the spin times out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-slots_3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like the server doesn’t check that &lt;code&gt;cpl&lt;/code&gt; is set to a valid value before executing the spin. All goes to plan and when the play is complete our credit is now in the thousands! Mission complete - almost.&lt;/p&gt;

&lt;p&gt;Our task was actually to find a value in the JSON response once our credit exceeds 1,000. To do this, we can take a look for the relevant request and response on Burp Suite’s HTTP history page. Sure enough, in the &lt;code&gt;data.response&lt;/code&gt; field, we can see the following message from casino security:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-slots_4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that’s our flag: &lt;code&gt;I'm going to have some bouncer trolls bounce you right out of this casino!&lt;/code&gt; Hopefully we have enough time to submit it and take the credit for our hacking first.&lt;/p&gt;

&lt;p&gt;If you found this walkthrough interesting, please consider &lt;a href=&quot;https://twitter.com/mattcasmith&quot; target=&quot;_blank&quot;&gt;following me on Twitter&lt;/a&gt;, and don’t forget to sign up for the next SANS Holiday Hack Challenge circa December 2022!&lt;/p&gt;</content><author><name>mattcasmith</name></author><summary type="html">Here’s one more writeup from the SANS Holiday Hack Challenge! The slot machine hack was one of the showpiece challenges this year, so I thought I’d put together a quick blog post to guide you through the process of identifying and exploiting a vulnerability in the game. The challenge Our task is clear enough. We’re given a link to an online slot machine and the following request: Test the security of Jack Frost’s slot machines. What does the Jack Frost Tower casino security team threaten to do when your coin total exceeds 1,000? Submit the string in the server data.response element. Let’s follow the link and take a look at the slot machine. It’s fairly typical for such games (at least as per my understanding following a short trip to Las Vegas for Black Hat and Def Con). You can choose various options before placing a bet by hitting the Spin button. Your credit is updated based on the outcome. Since our objective is to hit more than 1,000 credit, we could just play the slots for a long time to try to get lucky. But that would take forever. Instead, let’s take under the hood to see what we can hack… Observing requests Like any web application, the slot machine must be communicating with a server behind the scenes to make playing the game possible. By using the Burp Suite proxy’s intercept function, we can hold requests and responses between the web browser and the server to give us time to review their contents and see what’s going on when we place a bet. Here’s what is sent when we hit the Spin button… This looks like a pretty standard web request. We can see that this is a POST request, which means that the client is transmitting information to the server (slots.jackfrosttower.com). We can see that the request provides some cookie information, details about the page we’re on and our user agent, and so on. This is all pretty normal for this kind of request. But what about that last line? betamount=1&amp;amp;numline=20&amp;amp;cpl=0.1 Comparing these variable names to the GUI, we can ascertain that this is our browser telling the server how much we’re betting, the number of lines we’re betting on, and the cost per line. Interesting. By tweaking these values, we might be able to: Change the bet amount to a bigger stake than we can actually afford Bet on more lines than actually exist on the slot machine Adjust the cost per line to alter the slot machine’s financial calculations From here, it’s a matter of trial and error. Attempting the first two potential exploits returns a Server Error response. That leaves only one option - but how can we use the cpl variable to our advantage? Crafting a malicious request So here’s the plan: We’re going to set cpl to a negative value to confuse the game if this input isn’t validated. For example, if we set it to -100 and there are 20 lines to play, that spin would cost us -2,000 credits to play and therefore actually increase our credit by 2,000 (and any winnings from the spin). To do this, we hit the Spin button on the slot machine’s GUI. Burp Suite intercepts the request. We must very quickly change the cpl value to -100 and hit the Forward button before the spin times out. It looks like the server doesn’t check that cpl is set to a valid value before executing the spin. All goes to plan and when the play is complete our credit is now in the thousands! Mission complete - almost. Our task was actually to find a value in the JSON response once our credit exceeds 1,000. To do this, we can take a look for the relevant request and response on Burp Suite’s HTTP history page. Sure enough, in the data.response field, we can see the following message from casino security: And that’s our flag: I'm going to have some bouncer trolls bounce you right out of this casino! Hopefully we have enough time to submit it and take the credit for our hacking first. If you found this walkthrough interesting, please consider following me on Twitter, and don’t forget to sign up for the next SANS Holiday Hack Challenge circa December 2022!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/01/sans-holiday-challenge-slots_1.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/01/sans-holiday-challenge-slots_1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SANS Holiday Hack Challenge 2021: Yara rule analysis walkthrough</title><link href="https://mattcasmith.net/2022/01/08/sans-holiday-hack-2021-yara-rules" rel="alternate" type="text/html" title="SANS Holiday Hack Challenge 2021&amp;#58; Yara rule analysis walkthrough" /><published>2022-01-08T00:00:00+00:00</published><updated>2022-01-08T00:00:00+00:00</updated><id>https://mattcasmith.net/2022/01/08/sans-holiday-hack-2021-yara-rules</id><content type="html" xml:base="https://mattcasmith.net/2022/01/08/sans-holiday-hack-2021-yara-rules">&lt;p&gt;Over the Christmas break I took part in an annual tradition - the &lt;a href=&quot;https://www.sans.org/mlp/holiday-hack-challenge/&quot; target=&quot;_blank&quot;&gt;SANS Holiday Hack Challenge&lt;/a&gt;! For 2021 the team had put together a fresh set of challenges for this festive CTF, and now that the deadline for submissions and subsequent embargo has passed, I thought I’d share a write-up of a challenge that appeared - from the in-game chat window at least - to catch a few people out.&lt;/p&gt;

&lt;p&gt;This challenge is all about Yara rules, which detect malware based on a series of conditions set out in a rule file. As set out in the screenshot below, Santa’s elves are having problems running an application that measures the sweetness levels of the candy they’re manufacturing. It’s heavily hinted that it’s being blocked because it’s matching a Yara rule, and that we might be able to change the program to bypass it.&lt;/p&gt;

&lt;p&gt;To start, let’s try running the app using &lt;code&gt;./the_critical_elf_app&lt;/code&gt; to see what we get…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_0.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What exactly are we seeing here? Well, our app has been blocked from executing because it has matched a Yara rule - &lt;code&gt;rule_135&lt;/code&gt;, to be precise. To get around this rule-based protection we have two options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change the Yara rule so that it no longer matches on the program&lt;/li&gt;
  &lt;li&gt;Change the program so that it no longer matches the Yara rule&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this challenge our user account does not have the privileges to amend Yara rules, so the second option is our only choice. Our first step will be to work out why the program is matching the rule.&lt;/p&gt;

&lt;h3 id=&quot;rule_135&quot;&gt;rule_135&lt;/h3&gt;

&lt;p&gt;If we &lt;code&gt;cd&lt;/code&gt; into a folder called &lt;code&gt;yara_rules&lt;/code&gt;, we can see a file called &lt;code&gt;rules.yar&lt;/code&gt; that contains all the Yara rules in use. Viewing its contents with &lt;code&gt;nano&lt;/code&gt; or &lt;code&gt;cat&lt;/code&gt; would take an age to scroll through, so instead we can use a &lt;code&gt;grep&lt;/code&gt; command that will return the 30 lines following a match on &lt;code&gt;rule_135&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule_135&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What does this show us? It turns out &lt;code&gt;rule_135&lt;/code&gt; is looking for a single string in the file: &lt;code&gt;candycane&lt;/code&gt; (in this case the &lt;code&gt;condition&lt;/code&gt; clause means it’s searching for this string only - we’ll see some more complex examples later on in the challenge). Now we know what we’re looking for, we can use &lt;code&gt;emacs&lt;/code&gt; to open &lt;code&gt;the_critical_elf_app&lt;/code&gt; and search for the offending string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With a little patience and scrolling, we can see that the string &lt;code&gt;candycane&lt;/code&gt; appears in the file. You might be wondering why in the screenshot above I’ve changed it to &lt;code&gt;candycand&lt;/code&gt; rather than deleting it entirely. That’s because we should try to alter the program as little as possible - if we change the number of characters, it is possible that references to sections later in the file may become inaccurate and the program may fail to run at all. Code is fragile stuff (something easily learnt from experience).&lt;/p&gt;

&lt;p&gt;Let’s save our changes and try running &lt;code&gt;the_critical_elf_app&lt;/code&gt; again…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh no! While our adjustment has allowed execution to progress beyond the check for &lt;code&gt;rule_135&lt;/code&gt;, it’s now being blocked because it matches &lt;code&gt;rule_1056&lt;/code&gt;. I guess it’s back to &lt;code&gt;rules.yar&lt;/code&gt; for us…&lt;/p&gt;

&lt;h3 id=&quot;rule_1056&quot;&gt;rule_1056&lt;/h3&gt;

&lt;p&gt;Running another extended &lt;code&gt;grep&lt;/code&gt; on the Yara rule file shows us that &lt;code&gt;rule_1056&lt;/code&gt; requires a match on two strings, represented by the hex &lt;code&gt;6c 6962 632e 736f 2e36&lt;/code&gt; and &lt;code&gt;726f 6772 616d 2121&lt;/code&gt;. This is trickier, because those two don’t appear in their current form in &lt;code&gt;the_critical_elf_app&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To find what’s matching the rule, we first need to use &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot; target=&quot;_blank&quot;&gt;GCHQ’s CyberChef tool&lt;/a&gt; to convert the hex from &lt;code&gt;rules.yar&lt;/code&gt; to ASCII text. As shown below, after being passed through the &lt;code&gt;from hex&lt;/code&gt; filter they come out as &lt;code&gt;libc.so.6&lt;/code&gt; and &lt;code&gt;rogram!!&lt;/code&gt;. If Yara finds both of these strings, execution will be blocked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The important thing to note here is that &lt;em&gt;both&lt;/em&gt; strings need to match for Yara to block anything. One is not enough. This works in our favour when we return to &lt;code&gt;emacs&lt;/code&gt; and examine the file, because &lt;code&gt;libc.so.6&lt;/code&gt; looks like it’ll be required for the program to run.&lt;/p&gt;

&lt;p&gt;Meanwhile, &lt;code&gt;This is critical for the execution of this program!!&lt;/code&gt; looks like a comment, so as before, let’s try changing a single character and see what happens.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, we’re a step closer to a solution, at least. When we run the file with &lt;code&gt;./the_critical_elf_app&lt;/code&gt;, we now receive an error because the program has matched Yara’s &lt;code&gt;rule_1732&lt;/code&gt;. Another rule to investigate…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_7.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rule_1732&quot;&gt;rule_1732&lt;/h3&gt;

&lt;p&gt;When we &lt;code&gt;grep&lt;/code&gt; for the contents of &lt;code&gt;rule_1732&lt;/code&gt;, we can see that this rule is a little more complex than those we’ve seen before. First of all, our eyes are drawn to the 20 different strings this rule looks for. The &lt;code&gt;condition&lt;/code&gt; clause says the program must match ten of them to be blocked. But there are more conditions that must be met - including that the file size is less than 50kb.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My first thought was to take a similar approach to the previous rules and to change enough of the file to avoid matching ten of the strings, but this proved more challenging than I thought. While strings like &lt;code&gt;its_a_holly_jolly_variable&lt;/code&gt; might be easy enough to substitute out, terms like &lt;code&gt;GLIBC_2.2.5&lt;/code&gt; are more likely to be essential for the program to run. All my attempts either didn’t change enough to evade detection by Yara, or changed too much and broke the app.&lt;/p&gt;

&lt;p&gt;I then turned my attention to the other conditions. The file size was initially about 16kb - could I bump it up to more than 50kb? I decided the best way to do this was to add some padding to the file, but encoding issues meant I couldn’t &lt;code&gt;nano&lt;/code&gt; or &lt;code&gt;echo&lt;/code&gt; in a bunch of nonsense without breaking the program.&lt;/p&gt;

&lt;p&gt;I obviously needed a more creative approach… It was clear I needed to tackle the problem using &lt;code&gt;emacs&lt;/code&gt;, but after some Googling regarding the clunky Linux terminal copy and paste options I was no closer to a solution and running out of time. Sure of the answer but not the method, I took some inspiration from an old episode of &lt;em&gt;The Simpsons&lt;/em&gt; to come to an outside-the-box but very practical solution…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s right - I just fired up &lt;code&gt;emacs&lt;/code&gt;, scrolled to the end of the document, and left my water bottle resting on the space bar until enough characters had been added to push the file over the 50kb minimum. It took a while (in truth I went and handled some other stuff while it was running), but after saving the file and using &lt;code&gt;ls -l&lt;/code&gt; to check it was now more than 50kb, I ran &lt;code&gt;the_critical_elf_app&lt;/code&gt; one last time and…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2022/01/sans-holiday-challenge-yara_10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mission accomplished! I’m sure there were more graceful ways to reach the same outcome, but I’ll put this one down as more proof that a decent understanding of the problem and creative thinking can be just as important in cyber security as any deep technical knowledge in many situations.&lt;/p&gt;

&lt;p&gt;And if you’re wondering what &lt;em&gt;that&lt;/em&gt; hex means, it comes out as &lt;code&gt;Jolly Enough, Overtime Approved&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you found this walkthrough interesting, please consider &lt;a href=&quot;https://twitter.com/mattcasmith&quot; target=&quot;_blank&quot;&gt;following me on Twitter&lt;/a&gt;, and don’t forget to sign up for the next SANS Holiday Hack Challenge circa December 2022!&lt;/p&gt;</content><author><name>mattcasmith</name></author><summary type="html">Over the Christmas break I took part in an annual tradition - the SANS Holiday Hack Challenge! For 2021 the team had put together a fresh set of challenges for this festive CTF, and now that the deadline for submissions and subsequent embargo has passed, I thought I’d share a write-up of a challenge that appeared - from the in-game chat window at least - to catch a few people out. This challenge is all about Yara rules, which detect malware based on a series of conditions set out in a rule file. As set out in the screenshot below, Santa’s elves are having problems running an application that measures the sweetness levels of the candy they’re manufacturing. It’s heavily hinted that it’s being blocked because it’s matching a Yara rule, and that we might be able to change the program to bypass it. To start, let’s try running the app using ./the_critical_elf_app to see what we get… What exactly are we seeing here? Well, our app has been blocked from executing because it has matched a Yara rule - rule_135, to be precise. To get around this rule-based protection we have two options: Change the Yara rule so that it no longer matches on the program Change the program so that it no longer matches the Yara rule In this challenge our user account does not have the privileges to amend Yara rules, so the second option is our only choice. Our first step will be to work out why the program is matching the rule. rule_135 If we cd into a folder called yara_rules, we can see a file called rules.yar that contains all the Yara rules in use. Viewing its contents with nano or cat would take an age to scroll through, so instead we can use a grep command that will return the 30 lines following a match on rule_135: grep rule_135 rules.yar -A 30 What does this show us? It turns out rule_135 is looking for a single string in the file: candycane (in this case the condition clause means it’s searching for this string only - we’ll see some more complex examples later on in the challenge). Now we know what we’re looking for, we can use emacs to open the_critical_elf_app and search for the offending string. With a little patience and scrolling, we can see that the string candycane appears in the file. You might be wondering why in the screenshot above I’ve changed it to candycand rather than deleting it entirely. That’s because we should try to alter the program as little as possible - if we change the number of characters, it is possible that references to sections later in the file may become inaccurate and the program may fail to run at all. Code is fragile stuff (something easily learnt from experience). Let’s save our changes and try running the_critical_elf_app again… Oh no! While our adjustment has allowed execution to progress beyond the check for rule_135, it’s now being blocked because it matches rule_1056. I guess it’s back to rules.yar for us… rule_1056 Running another extended grep on the Yara rule file shows us that rule_1056 requires a match on two strings, represented by the hex 6c 6962 632e 736f 2e36 and 726f 6772 616d 2121. This is trickier, because those two don’t appear in their current form in the_critical_elf_app… To find what’s matching the rule, we first need to use GCHQ’s CyberChef tool to convert the hex from rules.yar to ASCII text. As shown below, after being passed through the from hex filter they come out as libc.so.6 and rogram!!. If Yara finds both of these strings, execution will be blocked. The important thing to note here is that both strings need to match for Yara to block anything. One is not enough. This works in our favour when we return to emacs and examine the file, because libc.so.6 looks like it’ll be required for the program to run. Meanwhile, This is critical for the execution of this program!! looks like a comment, so as before, let’s try changing a single character and see what happens. Well, we’re a step closer to a solution, at least. When we run the file with ./the_critical_elf_app, we now receive an error because the program has matched Yara’s rule_1732. Another rule to investigate… rule_1732 When we grep for the contents of rule_1732, we can see that this rule is a little more complex than those we’ve seen before. First of all, our eyes are drawn to the 20 different strings this rule looks for. The condition clause says the program must match ten of them to be blocked. But there are more conditions that must be met - including that the file size is less than 50kb. My first thought was to take a similar approach to the previous rules and to change enough of the file to avoid matching ten of the strings, but this proved more challenging than I thought. While strings like its_a_holly_jolly_variable might be easy enough to substitute out, terms like GLIBC_2.2.5 are more likely to be essential for the program to run. All my attempts either didn’t change enough to evade detection by Yara, or changed too much and broke the app. I then turned my attention to the other conditions. The file size was initially about 16kb - could I bump it up to more than 50kb? I decided the best way to do this was to add some padding to the file, but encoding issues meant I couldn’t nano or echo in a bunch of nonsense without breaking the program. I obviously needed a more creative approach… It was clear I needed to tackle the problem using emacs, but after some Googling regarding the clunky Linux terminal copy and paste options I was no closer to a solution and running out of time. Sure of the answer but not the method, I took some inspiration from an old episode of The Simpsons to come to an outside-the-box but very practical solution… That’s right - I just fired up emacs, scrolled to the end of the document, and left my water bottle resting on the space bar until enough characters had been added to push the file over the 50kb minimum. It took a while (in truth I went and handled some other stuff while it was running), but after saving the file and using ls -l to check it was now more than 50kb, I ran the_critical_elf_app one last time and… Mission accomplished! I’m sure there were more graceful ways to reach the same outcome, but I’ll put this one down as more proof that a decent understanding of the problem and creative thinking can be just as important in cyber security as any deep technical knowledge in many situations. And if you’re wondering what that hex means, it comes out as Jolly Enough, Overtime Approved. If you found this walkthrough interesting, please consider following me on Twitter, and don’t forget to sign up for the next SANS Holiday Hack Challenge circa December 2022!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2022/01/sans-holiday-challenge-yara_9.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2022/01/sans-holiday-challenge-yara_9.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Backutil development: Implementing multiprocessing in Python</title><link href="https://mattcasmith.net/2021/05/03/multiprocessing-python" rel="alternate" type="text/html" title="Backutil development&amp;#58; Implementing multiprocessing in Python" /><published>2021-05-03T01:00:00+01:00</published><updated>2021-05-03T01:00:00+01:00</updated><id>https://mattcasmith.net/2021/05/03/implementing-multiprocessing-python</id><content type="html" xml:base="https://mattcasmith.net/2021/05/03/multiprocessing-python">&lt;p&gt;I’m still hard at work on &lt;a href=&quot;/2021/01/01/backutil-windows-backup-utility&quot;&gt;Backutil&lt;/a&gt;, my simple Windows backup utility with automatic rotation features, fitting in little tweaks and improvements around my daily schedule. The latest of these - and perhaps the most impactful in terms of performance - involves the implementation of multiprocessing for several parts of the code, which I thought was significant and interesting enough to warrant a write-up.&lt;/p&gt;

&lt;h3 id=&quot;why-implement-multiprocessing&quot;&gt;Why implement multiprocessing?&lt;/h3&gt;

&lt;p&gt;By default, Python scripts execute in a single processor thread. This is the equivalent of a road with a single lane of traffic. This is fine for most parts of the code, but consider some of the operations involved in Backutil - specifically the section that generates hashes for all the files in the backup directories (also the bit that copies files, but we’ll stick to one example in this post to keep things simple).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/multiprocessing_before.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s a clear bottleneck in this scenario. That one processor core is being worked hard, tasked with generating &lt;em&gt;all&lt;/em&gt; the hashes (yes, there may be other factors at play, like disk read speed, but we’ll ignore that for the purpose of this walkthrough). Even if my computer has six processor cores, we’re only using one. This inefficiency means the script takes longer to run over large batches of files.&lt;/p&gt;

&lt;p&gt;But what if we could use multiple cores at the same time? This would be akin to a road with many lanes of traffic - like &lt;a href=&quot;https://old.reddit.com/r/formula1/comments/c9v83x/baku_turn_1_on_a_non_f1_time/&quot; target=&quot;_blank&quot;&gt;turn one at the Baku Formula 1 street circuit on a normal day&lt;/a&gt; (just more efficient). Let’s try breaking our lists of files into chunks - three, for the sake of argument - and handling them separately.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/multiprocessing_after.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s better! Now we’ve split the list into parts and assigned each to its own process, we can use more of the computer’s potential and - &lt;em&gt;in theory&lt;/em&gt;, at least - complete the task in a third of the time it would have taken using our previous process. Then we recombine the results for use in the rest of the program.&lt;/p&gt;

&lt;h3 id=&quot;writing-a-function-to-generate-hashes&quot;&gt;Writing a function to generate hashes&lt;/h3&gt;

&lt;p&gt;To spawn separate processes to handle the hash generation, we need to define a function to do the dirty work. Each time we start an additional process, we will invoke this function and supply it with a subset of the data. For the purposes of generating file hashes, that will look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;procnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backup_files_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;colorama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return_dict_process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backup_files_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sha256_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_block&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65535&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sha256_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hash_output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha256_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;return_dict_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_output&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Couldn't generate hash for &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Warning&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;procnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_dict_process&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I won’t go into detail on the hash generation itself - that’s for a different post - but I will point out some important elements as far as multiprocessing is concerned.&lt;/p&gt;

&lt;p&gt;First, take a look at the arguments that &lt;code&gt;generate_hashes&lt;/code&gt; takes as input. The variable &lt;code&gt;procnum&lt;/code&gt; will let us assign each subprocess an identifier, &lt;code&gt;backup_files_thread&lt;/code&gt; will be used to supply the data that the subprocess will work on, and &lt;code&gt;version&lt;/code&gt; is just the Backutil version number for logging purposes.&lt;/p&gt;

&lt;p&gt;The special dictionary &lt;code&gt;return_dict&lt;/code&gt; will combine output from our subprocesses - more on that later. All we need to note now is that the final line of our function adds function output (&lt;code&gt;return_dict_process&lt;/code&gt;) as an entry in this dictionary, using the subprocess identifier (&lt;code&gt;procnum&lt;/code&gt;) as a key.&lt;/p&gt;

&lt;h3 id=&quot;splitting-the-dataset-into-chunks&quot;&gt;Splitting the dataset into chunks&lt;/h3&gt;

&lt;p&gt;But we can’t simply tell Python, or the &lt;code&gt;multiprocessing&lt;/code&gt; library, to take our list of files to generate hashes for and split it between &lt;code&gt;x&lt;/code&gt; processes. That would be too easy. We need to do the hard work ourselves and split the data (a list called &lt;code&gt;backup_files&lt;/code&gt;, full of file paths) into equal chunks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;split_backup_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backup_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When this line of code has done its thing, we’ll be left with a new list called &lt;code&gt;split_backup_files&lt;/code&gt;, within which will be a number of equal lists equal to the &lt;code&gt;config.max_threads&lt;/code&gt; variable, which the user should configure to be equal to the number of processor cores they want Backutil to use.&lt;/p&gt;

&lt;h3 id=&quot;assigning-each-chunk-to-a-subprocess&quot;&gt;Assigning each chunk to a subprocess&lt;/h3&gt;

&lt;p&gt;We’re nearly ready to get our subprocesses up and running, but before we do so there’s some housekeeping to take care of to keep track of processes and their output.&lt;/p&gt;

&lt;p&gt;In the first few lines of setup, &lt;code&gt;process_container&lt;/code&gt; will be used to track all the processes we create, while &lt;code&gt;manager&lt;/code&gt; - and specifically &lt;code&gt;manager.dict()&lt;/code&gt; as &lt;code&gt;return_dict&lt;/code&gt; - will provide a kind of magic dictionary that will take the output from each process (we saw the line in the function for this earlier). The &lt;code&gt;x&lt;/code&gt; value will track process IDs as we create them, iterating by one each time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;process_container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;return_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backup_files_thread&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split_backup_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Process-&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate_hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backup_files_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process_container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now for the real action. We iterate over &lt;code&gt;split_backup_files&lt;/code&gt; (you’ll remember the number of lists inside is equal to the number of threads) and for each item we use &lt;code&gt;multiprocessing.Process&lt;/code&gt; to create &lt;code&gt;Process X&lt;/code&gt;. The &lt;code&gt;target&lt;/code&gt; is our function, the &lt;code&gt;name&lt;/code&gt; comes from the variable we just created, and we supply all our function’s arguments in &lt;code&gt;args&lt;/code&gt;. The process is appended to &lt;code&gt;process_container&lt;/code&gt; for safekeeping, and with &lt;code&gt;process.start()&lt;/code&gt; we’re officially multiprocessing!&lt;/p&gt;

&lt;p&gt;One more important action for each process in the container here is &lt;code&gt;process.join()&lt;/code&gt;. This ensures that our parent process waits for each child process to finish before proceeding, ensuring we don’t start trying to use our hashes before they’ve all been generated and returned.&lt;/p&gt;

&lt;h3 id=&quot;checking-subprocess-exit-state&quot;&gt;Checking subprocess exit state&lt;/h3&gt;

&lt;p&gt;Time to build in a bit of resilience. The &lt;code&gt;generate_hashes&lt;/code&gt; function won’t fail if a single hash generation fails, but in the unlikely event that one of our subprocesses fails, we don’t want to proceed and complete a partial backup without the user knowing. Instead, we’ll check they succeed and interrupt Backutil if not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exitcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hash generation thread failed.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To achieve this, we iterate over the processes in &lt;code&gt;process_container&lt;/code&gt; and check the value of &lt;code&gt;process.exitcode&lt;/code&gt; for each. If it’s &lt;code&gt;0&lt;/code&gt; (success), and if it’s not then we log the error before calling &lt;code&gt;sys.exit()&lt;/code&gt; to end the program. Backutil will automatically clean up any temporary files on its way out.&lt;/p&gt;

&lt;h3 id=&quot;recombining-the-dataset&quot;&gt;Recombining the dataset&lt;/h3&gt;

&lt;p&gt;So we split our data, we processed it, and each subprocess has returned its output dictionary as an entry in the dictionary &lt;code&gt;return_dict&lt;/code&gt; with the process number as the key. As the final step, we want to recombine the returned hashes so they can be used elsewhere in the program.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;combined_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;combined_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is simple enough: We establish the dictionary &lt;code&gt;combined_dict&lt;/code&gt; for our output and begin to iterate over the values in &lt;code&gt;return_dict&lt;/code&gt;. Each key-value pair in each process’s returned dictionary is appended to &lt;code&gt;combined_dict&lt;/code&gt;. After all the entries have been processed, we’ve recombined our data!&lt;/p&gt;

&lt;h3 id=&quot;multiprocessing-in-action&quot;&gt;Multiprocessing in action&lt;/h3&gt;

&lt;p&gt;One of the nice (and convenient) things about multiprocessing is that - unlike most Python structures and implementations - we can see it in action directly in the operating system, rather than using variable explorers or debug &lt;code&gt;print&lt;/code&gt; statements. On Windows, we can simply check the Task Manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/multiprocessing_taskmanager.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the Details tab, we can see all of our currently running processes. By sorting them by name and finding all instances of &lt;code&gt;backutil.exe&lt;/code&gt;, we can see a number of processes equal to the &lt;code&gt;config.max_threads&lt;/code&gt; variable we saw earlier, plus the parent process - so we know multiprocessing is working properly.&lt;/p&gt;

&lt;h3 id=&quot;multiprocessing-on-windows-with-pyinstaller&quot;&gt;Multiprocessing on Windows with PyInstaller&lt;/h3&gt;

&lt;p&gt;I do have one more small note if you’re building a Python program for Windows using &lt;code&gt;multiprocessing&lt;/code&gt; and you’re planning on converting it to an &lt;code&gt;.exe&lt;/code&gt; file using &lt;a href=&quot;https://www.pyinstaller.org/&quot; target=&quot;_blank&quot;&gt;PyInstaller&lt;/a&gt;. In this case, you could do everything described above perfectly, and when you run your executable you’ll receive an error.&lt;/p&gt;

&lt;p&gt;Luckily, you need only one line of code to fix this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;multiprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeze_support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You must put &lt;code&gt;multiprocessing.freeze_support()&lt;/code&gt; at the start of this section of your code, but if you do this and recompile your executable with PyInstaller then everything should work again.&lt;/p&gt;</content><author><name>mattcasmith</name></author><summary type="html">I’m still hard at work on Backutil, my simple Windows backup utility with automatic rotation features, fitting in little tweaks and improvements around my daily schedule. The latest of these - and perhaps the most impactful in terms of performance - involves the implementation of multiprocessing for several parts of the code, which I thought was significant and interesting enough to warrant a write-up. Why implement multiprocessing? By default, Python scripts execute in a single processor thread. This is the equivalent of a road with a single lane of traffic. This is fine for most parts of the code, but consider some of the operations involved in Backutil - specifically the section that generates hashes for all the files in the backup directories (also the bit that copies files, but we’ll stick to one example in this post to keep things simple). There’s a clear bottleneck in this scenario. That one processor core is being worked hard, tasked with generating all the hashes (yes, there may be other factors at play, like disk read speed, but we’ll ignore that for the purpose of this walkthrough). Even if my computer has six processor cores, we’re only using one. This inefficiency means the script takes longer to run over large batches of files. But what if we could use multiple cores at the same time? This would be akin to a road with many lanes of traffic - like turn one at the Baku Formula 1 street circuit on a normal day (just more efficient). Let’s try breaking our lists of files into chunks - three, for the sake of argument - and handling them separately. That’s better! Now we’ve split the list into parts and assigned each to its own process, we can use more of the computer’s potential and - in theory, at least - complete the task in a third of the time it would have taken using our previous process. Then we recombine the results for use in the rest of the program. Writing a function to generate hashes To spawn separate processes to handle the hash generation, we need to define a function to do the dirty work. Each time we start an additional process, we will invoke this function and supply it with a subset of the data. For the purposes of generating file hashes, that will look like this: def generate_hashes(procnum, backup_files_thread, return_dict, version): colorama.init() return_dict_process = {} for filename in backup_files_thread: try: sha256_hash = hashlib.sha256() with open(filename,&quot;rb&quot;) as f: for byte_block in iter(lambda: f.read(65535),b&quot;&quot;): sha256_hash.update(byte_block) hash_output = (sha256_hash.hexdigest()) return_dict_process[filename] = hash_output except: msg = &quot;Couldn't generate hash for &quot; + filename log(msg, &quot;Warning&quot;, version) return_dict[procnum] = return_dict_process I won’t go into detail on the hash generation itself - that’s for a different post - but I will point out some important elements as far as multiprocessing is concerned. First, take a look at the arguments that generate_hashes takes as input. The variable procnum will let us assign each subprocess an identifier, backup_files_thread will be used to supply the data that the subprocess will work on, and version is just the Backutil version number for logging purposes. The special dictionary return_dict will combine output from our subprocesses - more on that later. All we need to note now is that the final line of our function adds function output (return_dict_process) as an entry in this dictionary, using the subprocess identifier (procnum) as a key. Splitting the dataset into chunks But we can’t simply tell Python, or the multiprocessing library, to take our list of files to generate hashes for and split it between x processes. That would be too easy. We need to do the hard work ourselves and split the data (a list called backup_files, full of file paths) into equal chunks. split_backup_files = (backup_files[i::config.max_threads] for i in range(config.max_threads)) When this line of code has done its thing, we’ll be left with a new list called split_backup_files, within which will be a number of equal lists equal to the config.max_threads variable, which the user should configure to be equal to the number of processor cores they want Backutil to use. Assigning each chunk to a subprocess We’re nearly ready to get our subprocesses up and running, but before we do so there’s some housekeeping to take care of to keep track of processes and their output. In the first few lines of setup, process_container will be used to track all the processes we create, while manager - and specifically manager.dict() as return_dict - will provide a kind of magic dictionary that will take the output from each process (we saw the line in the function for this earlier). The x value will track process IDs as we create them, iterating by one each time. process_container = [] manager = multiprocessing.Manager() return_dict = manager.dict() x = 1 for backup_files_thread in split_backup_files: name = &quot;Process-&quot; + str(x) process = multiprocessing.Process(target=generate_hashes, name=name, args=(x, backup_files_thread, return_dict, version,)) process_container.append(process) process.start() x += 1 for process in process_container: process.join() Now for the real action. We iterate over split_backup_files (you’ll remember the number of lists inside is equal to the number of threads) and for each item we use multiprocessing.Process to create Process X. The target is our function, the name comes from the variable we just created, and we supply all our function’s arguments in args. The process is appended to process_container for safekeeping, and with process.start() we’re officially multiprocessing! One more important action for each process in the container here is process.join(). This ensures that our parent process waits for each child process to finish before proceeding, ensuring we don’t start trying to use our hashes before they’ve all been generated and returned. Checking subprocess exit state Time to build in a bit of resilience. The generate_hashes function won’t fail if a single hash generation fails, but in the unlikely event that one of our subprocesses fails, we don’t want to proceed and complete a partial backup without the user knowing. Instead, we’ll check they succeed and interrupt Backutil if not. for process in process_container: if process.exitcode == 0: continue else: log(&quot;Hash generation thread failed.&quot;, &quot;Failure&quot;, version) sys.exit() To achieve this, we iterate over the processes in process_container and check the value of process.exitcode for each. If it’s 0 (success), and if it’s not then we log the error before calling sys.exit() to end the program. Backutil will automatically clean up any temporary files on its way out. Recombining the dataset So we split our data, we processed it, and each subprocess has returned its output dictionary as an entry in the dictionary return_dict with the process number as the key. As the final step, we want to recombine the returned hashes so they can be used elsewhere in the program. combined_dict = {} for dictionary in return_dict.values(): for key, value in dictionary.items(): combined_dict[key] = value This is simple enough: We establish the dictionary combined_dict for our output and begin to iterate over the values in return_dict. Each key-value pair in each process’s returned dictionary is appended to combined_dict. After all the entries have been processed, we’ve recombined our data! Multiprocessing in action One of the nice (and convenient) things about multiprocessing is that - unlike most Python structures and implementations - we can see it in action directly in the operating system, rather than using variable explorers or debug print statements. On Windows, we can simply check the Task Manager. In the Details tab, we can see all of our currently running processes. By sorting them by name and finding all instances of backutil.exe, we can see a number of processes equal to the config.max_threads variable we saw earlier, plus the parent process - so we know multiprocessing is working properly. Multiprocessing on Windows with PyInstaller I do have one more small note if you’re building a Python program for Windows using multiprocessing and you’re planning on converting it to an .exe file using PyInstaller. In this case, you could do everything described above perfectly, and when you run your executable you’ll receive an error. Luckily, you need only one line of code to fix this. if __name__ == &quot;__main__&quot;: multiprocessing.freeze_support() You must put multiprocessing.freeze_support() at the start of this section of your code, but if you do this and recompile your executable with PyInstaller then everything should work again.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2021/04/multiprocessing_after.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2021/04/multiprocessing_after.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Installing Splunk Free in a virtual machine for log analysis</title><link href="https://mattcasmith.net/2021/05/01/installing-splunk-free-virtual-machine-log-analysis" rel="alternate" type="text/html" title="Installing Splunk Free in a virtual machine for log analysis" /><published>2021-05-01T01:00:00+01:00</published><updated>2021-05-01T01:00:00+01:00</updated><id>https://mattcasmith.net/2021/05/01/running-splunk-virtual-machine</id><content type="html" xml:base="https://mattcasmith.net/2021/05/01/installing-splunk-free-virtual-machine-log-analysis">&lt;p&gt;Splunk is considered the gold standard for analysis of event logs and other data, but unless you’re lucky enough to work for an organisation that pays for it, it can be difficult to get practical experience in how to run searches, build dashboards, and otherwise dissect data using its query language.&lt;/p&gt;

&lt;p&gt;Recently, when I wanted to take a look at some &lt;a href=&quot;/2021/01/01/backutil-windows-backup-utility&quot;&gt;Backutil&lt;/a&gt; logs to see how recent development had affected performance, I stumbled across &lt;a href=&quot;https://docs.splunk.com/Documentation/Splunk/8.1.3/Admin/MoreaboutSplunkFree&quot; target=&quot;_blank&quot;&gt;Splunk Free&lt;/a&gt; - a limited version of the logging platform - and discovered just how easy it is to install (and how surprisingly well it runs) in a virtual machine. Here’s how to do it…&lt;/p&gt;

&lt;h3 id=&quot;setting-up-a-virtual-machine&quot;&gt;Setting up a virtual machine&lt;/h3&gt;

&lt;p&gt;For the purposes of this post, I’ll assume you’re familiar with the basics of setting up a virtual machine in VirtualBox or VMware. I won’t go over the process of creating the machine, but I will point out some key steps to take to make sure Splunk works and is accessible from your host system.&lt;/p&gt;

&lt;p&gt;First, choose your Linux distro. I went for &lt;a href=&quot;https://www.centos.org/&quot; target=&quot;_blank&quot;&gt;CentOS&lt;/a&gt;, which is usually a safe bet to run a stable server with less of the fluff that comes with some other versions, with 8GB of RAM. Like most modern operating systems, installation is as easy as booting from the ISO and following the on-screen instructions.&lt;/p&gt;

&lt;p&gt;One extra (but critically important) step: You’ll want to check the virtual machine’s network connection is set to Bridged Adapter. When you boot it up, configure an IP address on the same subnet as your host machine. With these settings, the guest system will behave as though it is a completely separate machine on the network as your computer. This way, once we’ve made some firewall changes, we’ll be able to access Splunk in our browser at the virtual machine’s IP address.&lt;/p&gt;

&lt;h3 id=&quot;downloading-and-installing-splunk&quot;&gt;Downloading and installing Splunk&lt;/h3&gt;

&lt;p&gt;With our virtual machine set up, it’s time to install Splunk. Download Splunk Free for Linux (you can find it by clicking Free Splunk in the top right corner of &lt;a href=&quot;https://www.splunk.com/&quot; target=&quot;_blank&quot;&gt;the Splunk homepage&lt;/a&gt; and selecting Software Download). Either do this in your virtual machine, or do it on your host system and copy the file to your Linux machine.&lt;/p&gt;

&lt;p&gt;To install Splunk, we need to extract &lt;code&gt;splunk-x.x.x-x-Linux-x86_64.tgz&lt;/code&gt; to the &lt;code&gt;/opt&lt;/code&gt; directory. The easiest way to do this is to copy it to the correct directory and run the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xvf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;63079&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c59e632&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x86_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tgz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should now have a &lt;code&gt;/opt/splunk&lt;/code&gt; folder containing the archive’s contents, which are essentially a fully-fledged Splunk installation. There’s just one more command to run to get Splunk up and running.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;license&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first time you run this file, it will launch the Splunk installer, which will give you an opportunity to set an administrator username and password before your instance is live. At this point, you should be able to access Splunk at &lt;code&gt;127.0.0.1:8000&lt;/code&gt; in your virtual machine’s web browser.&lt;/p&gt;

&lt;h3 id=&quot;configuring-the-linux-firewall&quot;&gt;Configuring the Linux firewall&lt;/h3&gt;

&lt;p&gt;But wouldn’t it be much simpler if we could access Splunk from our host system? To do that, we need to allow connections to our virtual machine on port 8000. The exact command you’ll need to run will depend on which Linux distro you chose for your virtual machine, but in CentOS it looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firewall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permanent&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p style=&quot;float: left; width: 90%; padding: 5px; padding-left: 15px; padding-right: 5%; margin: 30px 0 10px 0; font-style: italic; border-left: 5px solid red; background: #ff9999; color: #333;&quot;&gt;Note that this firewall rule will open your virtual machine to all connections on TCP port 8000. If you're working with more sensitive data or in a less secure/private environment, you'll probably want to be more specific - for example, by specifying a source IP address.&lt;/p&gt;

&lt;p&gt;Now that this firewall rule has been added as a permanent rule, we need to use the &lt;code&gt;reload&lt;/code&gt; command to refresh the live instance of the firewall with the latest ruleset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firewall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reload&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That should do the trick, but if you want to make sure that you’ve done everything correctly, use the &lt;code&gt;list-all&lt;/code&gt; option to check that your new rule is present and correct.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firewall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Your output should look something like this - the important bit is that &lt;code&gt;8000/tcp&lt;/code&gt; is under &lt;code&gt;ports&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/05/splunk_vm_firewall.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If your firewall rule has been added successfully, you’re ready to start using Splunk!&lt;/p&gt;

&lt;h3 id=&quot;accessing-your-splunk-instance&quot;&gt;Accessing your Splunk instance&lt;/h3&gt;

&lt;p&gt;Open a web browser on your host machine and type in the IP address of your virtual machine followed by &lt;code&gt;:8000&lt;/code&gt;. With any luck, you’ll presented with a Splunk login page. Sign in with the administrator credentials you set a little earlier and there you have it - your own Splunk instance to tinker and experiment with.&lt;/p&gt;

&lt;p&gt;At this point, it’s probably a good idea to take a virtual machine snapshot before you start importing data or changing settings. That way, if you make any mistakes, or want to start fresh for any other reason, you can simply revert to the snapshot without doing all the setup again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/05/splunk_vm_data.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we’re done! Obviously Splunk won’t run quite as well on a virtual machine with 8GB of RAM as it does in the cloud or on a dedicated server cluster (and it will show warning messages to remind you of this), but I’ve found it surprisingly stable when analysing small datasets and learning its features.&lt;/p&gt;</content><author><name>mattcasmith</name></author><summary type="html">Splunk is considered the gold standard for analysis of event logs and other data, but unless you’re lucky enough to work for an organisation that pays for it, it can be difficult to get practical experience in how to run searches, build dashboards, and otherwise dissect data using its query language. Recently, when I wanted to take a look at some Backutil logs to see how recent development had affected performance, I stumbled across Splunk Free - a limited version of the logging platform - and discovered just how easy it is to install (and how surprisingly well it runs) in a virtual machine. Here’s how to do it… Setting up a virtual machine For the purposes of this post, I’ll assume you’re familiar with the basics of setting up a virtual machine in VirtualBox or VMware. I won’t go over the process of creating the machine, but I will point out some key steps to take to make sure Splunk works and is accessible from your host system. First, choose your Linux distro. I went for CentOS, which is usually a safe bet to run a stable server with less of the fluff that comes with some other versions, with 8GB of RAM. Like most modern operating systems, installation is as easy as booting from the ISO and following the on-screen instructions. One extra (but critically important) step: You’ll want to check the virtual machine’s network connection is set to Bridged Adapter. When you boot it up, configure an IP address on the same subnet as your host machine. With these settings, the guest system will behave as though it is a completely separate machine on the network as your computer. This way, once we’ve made some firewall changes, we’ll be able to access Splunk in our browser at the virtual machine’s IP address. Downloading and installing Splunk With our virtual machine set up, it’s time to install Splunk. Download Splunk Free for Linux (you can find it by clicking Free Splunk in the top right corner of the Splunk homepage and selecting Software Download). Either do this in your virtual machine, or do it on your host system and copy the file to your Linux machine. To install Splunk, we need to extract splunk-x.x.x-x-Linux-x86_64.tgz to the /opt directory. The easiest way to do this is to copy it to the correct directory and run the following command. sudo tar xvf splunk-8.1.3-63079c59e632-Linux-x86_64.tgz You should now have a /opt/splunk folder containing the archive’s contents, which are essentially a fully-fledged Splunk installation. There’s just one more command to run to get Splunk up and running. sudo /opt/bin/splunk/start --accept-license The first time you run this file, it will launch the Splunk installer, which will give you an opportunity to set an administrator username and password before your instance is live. At this point, you should be able to access Splunk at 127.0.0.1:8000 in your virtual machine’s web browser. Configuring the Linux firewall But wouldn’t it be much simpler if we could access Splunk from our host system? To do that, we need to allow connections to our virtual machine on port 8000. The exact command you’ll need to run will depend on which Linux distro you chose for your virtual machine, but in CentOS it looks like this: sudo firewall-cmd --zone=public --add-port=8000/tcp --permanent Note that this firewall rule will open your virtual machine to all connections on TCP port 8000. If you're working with more sensitive data or in a less secure/private environment, you'll probably want to be more specific - for example, by specifying a source IP address. Now that this firewall rule has been added as a permanent rule, we need to use the reload command to refresh the live instance of the firewall with the latest ruleset. sudo firewall-cmd --reload That should do the trick, but if you want to make sure that you’ve done everything correctly, use the list-all option to check that your new rule is present and correct. sudo firewall-cmd --list-all Your output should look something like this - the important bit is that 8000/tcp is under ports. If your firewall rule has been added successfully, you’re ready to start using Splunk! Accessing your Splunk instance Open a web browser on your host machine and type in the IP address of your virtual machine followed by :8000. With any luck, you’ll presented with a Splunk login page. Sign in with the administrator credentials you set a little earlier and there you have it - your own Splunk instance to tinker and experiment with. At this point, it’s probably a good idea to take a virtual machine snapshot before you start importing data or changing settings. That way, if you make any mistakes, or want to start fresh for any other reason, you can simply revert to the snapshot without doing all the setup again. And we’re done! Obviously Splunk won’t run quite as well on a virtual machine with 8GB of RAM as it does in the cloud or on a dedicated server cluster (and it will show warning messages to remind you of this), but I’ve found it surprisingly stable when analysing small datasets and learning its features.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2021/05/splunk_vm_data.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2021/05/splunk_vm_data.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">File carving: Recovering a deleted file from a Windows disk image</title><link href="https://mattcasmith.net/2021/04/02/file-carving-recovering-deleted-file-disk-image" rel="alternate" type="text/html" title="File carving&amp;#58; Recovering a deleted file from a Windows disk image" /><published>2021-04-02T01:00:00+01:00</published><updated>2021-04-02T01:00:00+01:00</updated><id>https://mattcasmith.net/2021/04/02/file-carving-recovering-deleted-file-disk-image</id><content type="html" xml:base="https://mattcasmith.net/2021/04/02/file-carving-recovering-deleted-file-disk-image">&lt;p&gt;Most computer users assume that when they delete a file and empty the Recycle Bin, it’s gone forever. After all, if Windows doesn’t show us a file, it doesn’t exist anymore, right? Wrong. With the right tools and knowledge, forensics experts can find fragments - or even complete versions - of deleted files that remain on the hard disk long after they disappear from Windows Explorer.&lt;/p&gt;

&lt;p&gt;In this post, I’ll run through how to take a disk image and recover deleted files using FTK Imager and a hex editor, explain why this works, and show how certain utilities let you overwrite this remnant data.&lt;/p&gt;

&lt;h3 id=&quot;what-happens-when-you-delete-a-file&quot;&gt;What happens when you delete a file?&lt;/h3&gt;

&lt;p&gt;To give myself something to find, I created the text file shown below on a 2GB hard drive partition. I saved it, then closed it, deleted it, and emptied the Recycle Bin to render it inaccessible to any normal Windows user. But what is actually happening in the background when you do this?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/deletedfile_file.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the top of your hard drive is what’s known as the master file table (MFT). This is essentially an index - it contains filenames along with the addresses on the hard drive that these files can be found at. So when I create &lt;code&gt;test_file.txt&lt;/code&gt;, an MFT record is created containing that filename and the address where the data (i.e. the file contents) is stored - in this case that’s &lt;code&gt;40009D50h&lt;/code&gt;, but we don’t know that yet.&lt;/p&gt;

&lt;p&gt;When you delete a file, none of this information is removed from the disk. All deletion does is add a “deleted” flag to the MFT record, telling the computer that the information at the specified address is no longer needed and can be overwritten with new data if necessary - but nothing is actually deleted at this point and the file data is still present on the disk. You can probably guess where this is going…&lt;/p&gt;

&lt;h3 id=&quot;creating-a-disk-image-with-ftk-imager&quot;&gt;Creating a disk image with FTK Imager&lt;/h3&gt;

&lt;p&gt;With the right tools, we can access the remnant data. First, we need a physical disk image to work with. &lt;a href=&quot;https://accessdata.com/product-download&quot; target=&quot;_blank&quot;&gt;FTK Imager&lt;/a&gt; is a free tool that allows us to create one. We choose a few simple options (I’m generating an image in the &lt;code&gt;E01&lt;/code&gt; format) and set it to work. Depending on the size of the disk and your computer’s speed, it will take a little while to generate the image, which is an exact replica of the hard drive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/deletedfile_ftk.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing to note is that the image cannot be generated on the same physical hard drive that is being imaged. For this reason, unless the system has multiple hard drives, it is necessary to choose to save the image to a directory on a removable drive or a network share, rather than on the subject computer itself.&lt;/p&gt;

&lt;h3 id=&quot;recovering-a-deleted-file-with-ftk-imager&quot;&gt;Recovering a deleted file with FTK Imager&lt;/h3&gt;

&lt;p&gt;FTK Imager can also be useful for the next step in our process - it can actually do the hard work for us and recover the deleted file. If we mount the physical image we created and open the correct partition, we can navigate through the file system to find deleted files, which will be marked with a red cross.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/deletedfile_ftkrecover.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the last place the file was present was the Recycle Bin (read my post about &lt;a href=&quot;/2018/12/15/python-windows-forensics-recycle-bin-deleted-files/&quot;&gt;Python forensics for the Recycle Bin&lt;/a&gt; for more information about the file structure), its MFT entry points to that directory. Here, we can see that the file &lt;code&gt;$RHEYFYA.txt&lt;/code&gt; is our test file, and FTK Imager helpfully displays the contents.&lt;/p&gt;

&lt;h3 id=&quot;recovering-a-deleted-file-with-a-hex-editor&quot;&gt;Recovering a deleted file with a hex editor&lt;/h3&gt;

&lt;p&gt;But things won’t always be that easy, and we shouldn’t rely on tools to do our forensics for us without knowing how they work. We can find the same data manually by mounting the disk image and opening it in a hex editor - in this example, &lt;a href=&quot;https://www.sweetscape.com/010editor/&quot; target=&quot;_blank&quot;&gt;010 Editor&lt;/a&gt;. This displays the entire contents of the hard drive in hex format, and has a helpful feature that will search for strings amongst the data in the image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/deletedfile_hex.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I was able to find the text file’s contents by searching for strings. If we were looking for a different type of file, we might search according to its file signature, which indicates what format the file is in (for example, JPEGs start with &lt;code&gt;FF D8 FF E0&lt;/code&gt;). Text files don’t normally have signatures, and in this case we can see the file data starts immediately at the address &lt;code&gt;40009D50h&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;overwriting-traces-of-deleted-files&quot;&gt;Overwriting traces of deleted files&lt;/h3&gt;

&lt;p&gt;So we’ve seen that it’s possible to recover deleted files, but is there any way to remove them  from the disk completely? In short: yes, there is. Tools like &lt;a href=&quot;https://www.ccleaner.com/&quot; target=&quot;_blank&quot;&gt;CCleaner&lt;/a&gt; can overwrite the free space on a hard drive with nonsense data. If I run CCleaner’s Drive Wiper feature on our partition and repeat the above process, we can see that the address formerly occupied by &lt;code&gt;test_file.txt&lt;/code&gt; is now full of zeroes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/wp-content/uploads/2021/04/deletedfile_ccleaner.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While this prevents a forensic investigator from recovering a file’s contents if done correctly, using some of these tools will arouse suspicion in itself. Some wipers will fill free space with ones, Zs, or random data, and this does not normally occur naturally. If this is observed on a hard drive then questions will be asked over whether the user was trying to hide something and a more thorough search may be conducted.&lt;/p&gt;</content><author><name>mattcasmith</name></author><summary type="html">Most computer users assume that when they delete a file and empty the Recycle Bin, it’s gone forever. After all, if Windows doesn’t show us a file, it doesn’t exist anymore, right? Wrong. With the right tools and knowledge, forensics experts can find fragments - or even complete versions - of deleted files that remain on the hard disk long after they disappear from Windows Explorer. In this post, I’ll run through how to take a disk image and recover deleted files using FTK Imager and a hex editor, explain why this works, and show how certain utilities let you overwrite this remnant data. What happens when you delete a file? To give myself something to find, I created the text file shown below on a 2GB hard drive partition. I saved it, then closed it, deleted it, and emptied the Recycle Bin to render it inaccessible to any normal Windows user. But what is actually happening in the background when you do this? At the top of your hard drive is what’s known as the master file table (MFT). This is essentially an index - it contains filenames along with the addresses on the hard drive that these files can be found at. So when I create test_file.txt, an MFT record is created containing that filename and the address where the data (i.e. the file contents) is stored - in this case that’s 40009D50h, but we don’t know that yet. When you delete a file, none of this information is removed from the disk. All deletion does is add a “deleted” flag to the MFT record, telling the computer that the information at the specified address is no longer needed and can be overwritten with new data if necessary - but nothing is actually deleted at this point and the file data is still present on the disk. You can probably guess where this is going… Creating a disk image with FTK Imager With the right tools, we can access the remnant data. First, we need a physical disk image to work with. FTK Imager is a free tool that allows us to create one. We choose a few simple options (I’m generating an image in the E01 format) and set it to work. Depending on the size of the disk and your computer’s speed, it will take a little while to generate the image, which is an exact replica of the hard drive. One thing to note is that the image cannot be generated on the same physical hard drive that is being imaged. For this reason, unless the system has multiple hard drives, it is necessary to choose to save the image to a directory on a removable drive or a network share, rather than on the subject computer itself. Recovering a deleted file with FTK Imager FTK Imager can also be useful for the next step in our process - it can actually do the hard work for us and recover the deleted file. If we mount the physical image we created and open the correct partition, we can navigate through the file system to find deleted files, which will be marked with a red cross. As the last place the file was present was the Recycle Bin (read my post about Python forensics for the Recycle Bin for more information about the file structure), its MFT entry points to that directory. Here, we can see that the file $RHEYFYA.txt is our test file, and FTK Imager helpfully displays the contents. Recovering a deleted file with a hex editor But things won’t always be that easy, and we shouldn’t rely on tools to do our forensics for us without knowing how they work. We can find the same data manually by mounting the disk image and opening it in a hex editor - in this example, 010 Editor. This displays the entire contents of the hard drive in hex format, and has a helpful feature that will search for strings amongst the data in the image. As you can see, I was able to find the text file’s contents by searching for strings. If we were looking for a different type of file, we might search according to its file signature, which indicates what format the file is in (for example, JPEGs start with FF D8 FF E0). Text files don’t normally have signatures, and in this case we can see the file data starts immediately at the address 40009D50h. Overwriting traces of deleted files So we’ve seen that it’s possible to recover deleted files, but is there any way to remove them from the disk completely? In short: yes, there is. Tools like CCleaner can overwrite the free space on a hard drive with nonsense data. If I run CCleaner’s Drive Wiper feature on our partition and repeat the above process, we can see that the address formerly occupied by test_file.txt is now full of zeroes. While this prevents a forensic investigator from recovering a file’s contents if done correctly, using some of these tools will arouse suspicion in itself. Some wipers will fill free space with ones, Zs, or random data, and this does not normally occur naturally. If this is observed on a hard drive then questions will be asked over whether the user was trying to hide something and a more thorough search may be conducted.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mattcasmith.net/wp-content/uploads/2021/04/deletedfile_hex.png" /><media:content medium="image" url="https://mattcasmith.net/wp-content/uploads/2021/04/deletedfile_hex.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>